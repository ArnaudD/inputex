 _                   _   _____      
(_)_ __  _ __  _   _| |_| ____|_  __
| | '_ \| '_ \| | | | __|  _| \ \/ /		TODO list and various ideas
| | | | | |_) | |_| | |_| |___ >  < 		
|_|_| |_| .__/ \____|\__|_____/_/\_\
        |_|                         


- re-tabulate files

- Small visualization system
	=> used in UneditableField, InPlaceEditField and Autocompleter
	extandable: example with Trimpath JST http://code.google.com/p/trimpath/wiki/JavaScriptTemplates
	* examples for template functions
 	* doc for templating

- JSON Schema support: 
	http://groups.google.com/group/json-schema/web/json-schema-proposal---second-draft
	* convert a json schema into an inputEx field
	* convert an inputEx type definition to a JSON schema

- Doc avec JsDocToolkit 2 
 	* Refaire ma template


Architecture/Code/various: 
--------------------------

- use the YUI Loader

- Unify meta Fields: Use "subfield" or "subfields" as properties for the created subfield
	(InPlaceEdit,ListField,Autocomplete,Group,Form,TreeField,PairField...)

- ColorAnims: color must be CSS skinnable

- Make inputEx.Field extend YAHOO.widget.Element:
   * events => EventProvider
   * field options => AttributeProvider
   * use shortcuts

Bugs :
------

- IE6 bugs: http://groups.google.com/group/inputex/browse_thread/thread/740c02e56701a05c
	
Examples :
----------

- more PairField,TreeField Examples
- Examples: make an "updatedEvt" example for each field

CSS Styling :
------------

- skinnable (make the actual to skin-sam)
- make classNames out of field names so users can tailor fields/groups/form
  (css styling customization for each field)
- Passer tous les YAHOO.util.Dom.setStyle dans les CSS !

Nice form CSS :  http://30boxes.com/signup, http://www.rememberthemilk.com/signup/


Existing Fields enhancements :
------------------------------

- PlageField
	* le "lundi" (select) de "16"h"00" à "18"h"00"

- DateField
	* intégrer le minical de clicrdv dans YAHOO.inputEx.widget.calendar

- IntegerField:
	* implement radix option
	
- NumberField:
	* Correct bugs
	* maxDigits option

- ListField:
	* make buttons '+' and '-' optional so we have a sortable field (or an editable list with N elements)
	* implement minItems and maxItems options

- Field:
	* Put the status text in a floating div instead of the tooltip (allows to put it on the right or bottom of the field)
	* description text that appears on focus and on hover

- StringField:
	* typing invite: text (and style) when empty
	* add "minLength" and "maxLength" optional properties

- Form:
	* use 'label' tags instead of divs ?
   * http://groups.google.com/group/inputex/browse_thread/thread/cabc37a2d6df48be
	* align buttons
	* Server-side validation ?

- AutoCompleteField:
 	* implement multiple selection like http://www.interiders.com/wp-content/demos/ProtoAutocompleteList/test.html
		with a "select all" button

- PasswordField: 
	* output export in SHA1 or MD5
	* password strength indicator
	
- PairField:
	* use inputEx.buildField to build right/left fields

New Fields :
------------

- ObjectField : (from inputExHTML) is a list of pairfields where the left field is a key and the right field is a TypeField ?

- Slider Field (type: range )

- Function Field (for fun things with persevere)

- Un "SorterField" pour trier
- Date: integrate DateJs dans un datejs field
- a Location Field (lieu-dit, autocompleter ?)
- GeoLocation (with google maps ?)
- radio button
- Array Field (list of objects) (grid)
- n-Related fields (define relations within fields) -> Ou les mettre ?
- n-Related Select Boxes: http://pengoworks.com/qforms/docs/examples/n-related_selectboxes.htm
- server side image generator field
- grafiti field: http://blog.nihilogic.dk/2008/04/saving-canvas-data-to-image-file.html
- Faire un composant grid (partir du datatable de YUI ?) mais qui prend une définition de "group" en paramètres
- un Javascript function editor ?? (qui JSlint ;) )
- Captcha Field (http://ajaxian.com/archives/jquery-validation-plugin-v12-updated)

Applications:
-------------

- une interface pour convertir des données en fonction de leur schema :
	on rentre les deux schema json (src et tgt) puis on génère 1 formulaire pour chaque format
	on rend les entrées "wirables"
	l'utilisateur relie les entrées
	on génère une template jsont ou JST
	ex: convertir n'importe quel objet en RSS
	
- persevere browser:
	on peut générer dynamiquement les formulaires en fonction de leur JSON schema
	on peut utiliser le builder pour génerer des schemas et construire des classes
	faire un field pour éditer des fonctions
	
	pouvoir stocker ses formulaires dans persevere (si possible dans la définition des tables !)

- a chart image generator or builder: http://almaer.com/chartmaker/

- InputExDb:
	- des fonctions formatDom et formatValue avec une autodetection de type !
	- Un getType ou on lui donne n'importe quelle valeur et inputEx trouve le type le plus approprié (mettre des règles dans 	le registerType)	
	- A model association that would work either [on Gears, on an Ajax database endpoint, in Memory]
  	+ options (autogenerate SQL)
	- A importer that could create a form from an object of from SQL
- FormBuilder: 
	- default value field is not recreated when config changed
	- recharger la "valeur" du formulaire lorsque on le regénère
	- make it work on persevere
	- Remove all default parameters in code generator
	- doesn't work with the minified version of inputEx
- inputExRdf
- Faire un HTML properties group que l'on peut ajouter à tous les elements dom de la page !!!!!
   * avec un hover qui met une bordurer comme l'inspecteur de firebug.
- inputEx: chaque champ défini son type sql et rajouter un ORM gears !!
- a tool to generate packages from the selected component

- TaskManager: 
	* Run on top of persevere
