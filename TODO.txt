 _                   _   _____      
(_)_ __  _ __  _   _| |_| ____|_  __
| | '_ \| '_ \| | | | __|  _| \ \/ /		TODO list and various ideas
| | | | | |_) | |_| | |_| |___ >  < 		
|_|_| |_| .__/ \____|\__|_____/_/\_\
        |_|                         


Architecture/Code/various: 
--------------------------

- ues YAHOO.namespace to define the namespace
	The namespace would be YAHOO.inputEx instead of inputEx (we can provide an alias for backward compatibility)

- use the YUI Loader

- Make inputEx.Field extend YAHOO.widget.Element:
   * events => EventProvider
   * field options => AttributeProvider
   * use shortcuts

- Unify meta Fields: Use "subfield" or "subfields" as properties for the created subfield
	(InPlaceEdit,ListField,Autocomplete,Group,Form,TreeField,PairField...)
	
- get rid of the "spacerUrl" hack if possible

- use YAHOO.lang.substitute in autocompleter, inplaceedit, and uneditable fields (instead of formatString ?)

- Rendering templating engine ? (prédéfinir une liste de 'types' à prévisualiser)
	utilisé dans le UneditableField, InPlaceEditField
	
- include templating engine (http://code.google.com/p/trimpath/wiki/JavaScriptTemplates)
  pour faire un éditeur avec les in place edits

Bugs :
------

- IE6 bugs: http://groups.google.com/group/inputex/browse_thread/thread/740c02e56701a05c
	
Examples :
----------

- more PairField,TreeField Examples
- Examples: make an "updatedEvt" example for each field

CSS Styling :
------------

- skinnable (make the actual to skin-sam)
- use CSS floats instead of tables to order elements
- make classNames out of field names so users can tailor fields/groups/form
  (css styling customization for each field)
- Passer tous les YAHOO.util.Dom.setStyle dans les CSS !

Nice form CSS :  http://30boxes.com/signup, http://www.rememberthemilk.com/signup/

Optimization :
--------------

- CSS sprite images
- passer les inputEx.macclass.prototype.maFunc en YAHOO.extend(, ,{ maFunc: ...}) (doc issue)
- switch to jGrouseDoc ? (or implement better things in JsDocToolkit)
- enclose components in anonymous functions
- use prototype={} or YAHOO.extend(...,...,{ methods: });

Existing Fields enhancements :
------------------------------

- Field:
	* Put the status text in a floating div instead of the tooltip (allows to put it on the right or bottom of the field)

- StringField:
	* typing invite: text (and style) when empty
	* add "minlength" and "maxlength" optional properties
	
- Group:
	* move the "optional" option into inputEx.Group
	* make group options "groupable" (multi group options)
	* make entries with "float" instead of TDs

- Form:
  	* fieldset in forms
	* align buttons
	* Server-side validation ?

- ListField:
	* setFocus inside an added element
	* make buttons '+' and '-' optional so we have a sortable field

- AutoCompleteField:
 	* implement multiple selection like http://www.interiders.com/wp-content/demos/ProtoAutocompleteList/test.html

- TypeField:
	* do the form for the TypeField Configuration
	* many groupOptions forms to update
	* setValue is not implemented yet
	
- InPlaceEdit: 
	* uniformiser noms de fonctions : formatValue ici rend du DOM, alors que dans 
	  uneditable il faut utiliser formatDOM (formatValue pour texte)                  
     ou en faire une seule et tester si elle retourne une string ou du DOM ?

- UrlField: 
	* make favicon optional otherwise it breaks https

- PasswordField: 
	* output export in SHA1 or MD5
	* password strength indicator

New Fields :
------------

- Slider Field (type: integer ?)
- Un "SorterField" pour trier
- Date: integrate DateJs dans un datejs field
- GeoLocation (with google maps ?)
- radio button
- Array Field (list of objects) (grid)
- n-Related Select Boxes: http://pengoworks.com/qforms/docs/examples/n-related_selectboxes.htm
- server side image generator field
- grafiti field: http://blog.nihilogic.dk/2008/04/saving-canvas-data-to-image-file.html
- Faire un composant grid (partir du datatable de YUI ?) mais qui prend une définition de "group" en paramètres
- un Javascript function editor ?? (qui JSlint ;) )
- CAPTCHA !! (http://ajaxian.com/archives/jquery-validation-plugin-v12-updated)

Applications:
-------------

- InputExDb:
	- des fonctions formatDom et formatValue avec une autodetection de type !
	- Un getType ou on lui donne n'importe quelle valeur et inputEx trouve le type le plus approprié (mettre des règles dans 	le registerType)	
	- A model association that would work either [on Gears, on an Ajax database endpoint, in Memory]
  	+ options (autogenerate SQL)
	- A importer that could create a form from an object of from SQL
- FormBuilder: 
	- recharger la "valeur" du formulaire lorsque on le regénère
	- rajouter les boutons ( construire un Form au lieu d'un Groupe ?)
		=> faire inputEx.Form.formOptions	
	- make a form repository	
	- Builder: retirer tous les paramètres par défaut dans le code generator
- inputExRdf
- Faire un HTML properties group que l'on peut ajouter à tous les elements dom de la page !!!!!
   * avec un hover qui met une bordurer comme l'inspecteur de firebug.
- inputEx: chaque champ défini son type sql et rajouter un ORM gears !!
- un outil pour déterminer les dépendances
