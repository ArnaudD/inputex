{"majorversion": 3, "classmap": {"inputEx.CheckBox": {"name": "inputEx.CheckBox", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for CheckBoxes:\n<ul>\n<li>sentValues: 2D vector of values for checked/unchecked states (default is [true, false])</li>\n</ul>"}], "description": "Create a checkbox."}], "namespace": "", "module": "inputex-checkbox", "guessedname": "CheckBox", "methods": {"setValue": {"params": [{"type": "Any", "name": "value", "description": " The value schould be one of [checkedValue,uncheckedValue]"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the checkedbox", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Clear the previous events and listen for the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the checkbox and the hidden field", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "one of [checkedValue,uncheckedValue]"}, "description": "Get the state value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the CheckBox specific options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "Function called when the checkbox is toggled", "guessedname": "onChange", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-checkbox.js", "guessedtype": "function", "shortname": "inputEx.CheckBox", "description": "Create a checkbox."}, "inputEx.KeyOpValueField": {"name": "inputEx.KeyOpValueField", "extend": "inputEx.KeyValueField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " InputEx definition object with the \"availableFields\""}], "description": "Add an SQL operator select field in the middle of a KeyValueField"}], "namespace": "", "module": "inputex-keyopvalue", "guessedname": "KeyOpValueField", "methods": {"setOptions": {"description": "Setup the options.fields from the availableFields option", "guessedname": "setOptions", "guessedtype": "function"}}, "file": "inputex-keyopvalue.js", "guessedtype": "function", "shortname": "inputEx.KeyOpValueField", "description": "Add an SQL operator select field in the middle of a KeyValueField"}, "inputEx.RPC.Transport": {"name": "inputEx.RPC.Transport", "namespace": "", "module": "inputex-rpc", "guessedname": "Transport", "methods": {"POST": {"params": [{"type": "Object", "name": "r", "description": " Object specifying target, callback and data attributes"}], "description": "Build a ajax request using 'POST' method"}, "JSONP": {"params": [{"type": "Object", "name": "r", "description": " Object specifying target, callback and data attributes"}], "description": "Receive data through JSONP (insert a script tag within the page)"}, "TCP/IP": {"description": "NOT implemented"}, "REST": {"params": [{"type": "Object", "name": "r", "description": " Object specifying target, callback and data attributes"}], "description": "Build an ajax request using the right HTTP method"}, "GET": {"params": [{"type": "Object", "name": "r", "description": " Object specifying target, callback and data attributes"}], "description": "Build a ajax request using 'GET' method"}}, "static": "", "file": "inputex-rpc.js", "guessedtype": "property", "shortname": "inputEx.RPC.Transport", "description": "inputEx.RPC.Transport"}, "inputEx.widget.CellEditor": {"name": "inputEx.widget.CellEditor", "constructors": [{"params": [{"type": "Object", "name": "inputExFieldDef", "description": " InputEx field definition object"}], "description": "The CellEditor class provides functionality for inline editing in datatables\nusing the inputEx field definition."}], "namespace": "", "module": "inputex-dtinplaceedit", "guessedname": "CellEditor", "methods": {"renderForm": {"description": "Render the inputEx field editor", "guessedname": "renderForm", "guessedtype": "function"}, "save": {"description": "When clicking the save button but also when clicking out of the cell", "guessedname": "save", "guessedtype": "function"}, "getInputValue": {"description": "Returns new value for CellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in CellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets CellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "inputex-dtinplaceedit.js", "guessedtype": "function", "shortname": "inputEx.widget.CellEditor", "description": "The CellEditor class provides functionality for inline editing in datatables\nusing the inputEx field definition."}, "inputEx.RPC.Envelope.JSON-RPC-1.0": {"name": "inputEx.RPC.Envelope.JSON-RPC-1.0", "namespace": "", "module": "inputex-rpc", "methods": {"serialize": {"description": "serialize", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"description": "deserialize", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "shortname": "inputEx.RPC.Envelope.JSON-RPC-1.0", "description": "JSON-RPC-1.0 envelope"}, "inputEx.MapField": {"name": "inputEx.MapField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>loading</li>\n<li>lat</li>\n<li>lon</li>\n<li>uzoom</li>\n<li>api: google, yahoo or virtualearth (default)</li>\n<li>api_key</li>\n</ul>"}], "description": "Wrapper for Mapping APIs, including Google Maps, Yahoo Maps and Virtual Earth"}], "namespace": "", "module": "inputex-map", "guessedname": "MapField", "methods": {"preload": {"description": "This preloaded MAY not really work -- we recommend that you use\nthe following JavaScript instead _after_ \"yahoo-dom-event.js\" (or similar)\nis included:\nscript type=\"text/javascript\"\nYMAPPID = [yourapikey]\n/script\nscript type=\"text/javascript\" src=\"http://us.js2.yimg.com/us.js.yimg.com/lib/map/js/api/ymapapi_3_8_0_7.js\"\n/script\nNote the non-standard loading pattern! See:\nhttp://yuiblog.com/blog/2006/12/14/maps-plus-yui/", "guessedname": "preload", "guessedtype": "function"}, "wait_create": {"description": "This will wait until the DOM element appears before completion of map rendering", "guessedname": "wait_create", "guessedtype": "function"}, "setValue": {"description": "set the value: {lat: 45.23234, lon: 2.34456, uzoom: 6, nzoom: 6}", "guessedname": "setValue", "guessedtype": "function"}, "renderComponent": {"description": "Render the field using the appropriate mapping function", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"description": "return the same structure as setValue", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"description": "Adds the 'inputEx-MapField' default className", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-map.js", "guessedtype": "function", "shortname": "inputEx.MapField", "description": "Wrapper for Mapping APIs, including Google Maps, Yahoo Maps and Virtual Earth"}, "inputEx.VectorField": {"name": "inputEx.VectorField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputex-vector", "guessedname": "VectorField", "methods": {"setOptions": {"description": "Additional options for VectorField (dimension, size)", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-vector.js", "guessedtype": "function", "shortname": "inputEx.VectorField", "description": "A field limited to number inputs (floating)"}, "inputEx.SerializeField": {"name": "inputEx.SerializeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Standard inputEx options definition"}], "description": "SerializeField allows to serialize/deserialize a complex sub-group to a string"}], "namespace": "", "module": "inputex-serialize", "guessedname": "SerializeField", "methods": {"setValue": {"description": "Use the deserialize method and set the value of the subField", "guessedname": "setValue", "guessedtype": "function"}, "deserialize": {"description": "Use the configured deserializer", "guessedname": "deserialize", "guessedtype": "function"}, "initEvents": {"description": "Subscribe the subField", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the subfield", "guessedname": "renderComponent", "guessedtype": "function"}, "serialize": {"description": "Use the configured serializer", "guessedname": "serialize", "guessedtype": "function"}, "focus": {"description": "Sets the focus on this field", "guessedname": "focus", "guessedtype": "function"}, "getValue": {"description": "Use the subField getValue and serialize it with the selected serializing method", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds some options: subfield & serializer", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-serialize.js", "guessedtype": "function", "shortname": "inputEx.SerializeField", "description": "SerializeField allows to serialize/deserialize a complex sub-group to a string"}, "inputEx.MultiAutoCompleteCustom": {"name": "inputEx.MultiAutoCompleteCustom", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>maxItems: the number of Items</li>\n<li>maxItemsAlert: a function executed when the maxItems is reach</li>\n</ul>"}], "description": "Create a multi autocomplete field customized"}], "namespace": "", "module": "inputex-multiautocompletecustom", "guessedname": "MultiAutoCompleteCustom", "methods": {"onBlur": {"description": "onBlur : Override the onBlur of MultiAutocomplete to fix a bug with the blurEvent in InputEx 0.5.0", "guessedname": "onBlur", "guessedtype": "function"}, "renderComponent": {"description": "renderComponent : override the MultiAutocomplete renderComponent function\n<ul>\n<li>Use the custom ddlist </li>\n<li>render a Button \"Add\" to add non-autocomplete elements to the list</li>\n</ul>", "guessedname": "renderComponent", "guessedtype": "function"}, "onChange": {"description": "onChange : Override the onChange of MultiAutoocmplete to fix a bug with the blurEvent in InputEx 0.5.0\n<ul>\n<li>Add an element to the list from the value of the field </li>\n</ul>", "guessedname": "onChange", "guessedtype": "function"}, "onAdd": {"description": "onAdd : fired when someone click on the field button\n<ul>\n<li>Add an element to the list from the value of the field </li>\n</ul>", "guessedname": "onAdd", "guessedtype": "function"}}, "extends": "inputEx.MultiAutoComplete", "superclass": "inputEx.MultiAutoComplete", "file": "inputex-multiautocompletecustom.js", "guessedtype": "function", "shortname": "inputEx.MultiAutoCompleteCustom", "description": "Create a multi autocomplete field customized"}, "inputEx.MultiSelectCustomField": {"name": "inputEx.MultiSelectCustomField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>maxItems: the number of Items</li>\n<li>maxItemsAlert: a function executed when the maxItems is reach</li>\n<li>listSelectOptions : the options for a select field inside of the custom list</li>\n</ul>"}], "description": "Create a multi Select field customized"}], "namespace": "", "module": "inputex-multiselectcustom", "guessedname": "MultiSelectCustomField", "methods": {"renderComponent": {"description": "renderComponent : override the MultiSelectField renderComponent function\n<ul>\n<li>Use the custom ddlist </li>\n<li>put options for select fields in the ddList Custom</li>\n</ul>", "guessedname": "renderComponent", "guessedtype": "function"}}, "extends": "inputEx.MultiSelectField", "superclass": "inputEx.MultiSelectField", "file": "inputex-multiselectcustom.js", "guessedtype": "function", "shortname": "inputEx.MultiSelectCustomField", "description": "Create a multi Select field customized"}, "inputEx.KeyValueField": {"name": "inputEx.KeyValueField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " InputEx definition object with the \"availableFields\""}], "description": "Display a selectors for keys and auto-update the value field"}], "namespace": "", "module": "inputex-keyvalue", "guessedname": "KeyValueField", "methods": {"setOptions": {"description": "Setup the options.fields from the availableFields option", "guessedname": "setOptions", "guessedtype": "function"}, "generateSelectConfig": {"description": "Generate", "guessedname": "generateSelectConfig", "guessedtype": "function"}, "onSelectFieldChange": {"description": "Rebuild the value field", "guessedname": "onSelectFieldChange", "guessedtype": "function"}, "initEvents": {"description": "Subscribe the \"updated\" event on the key selector", "guessedname": "initEvents", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-keyvalue.js", "guessedtype": "function", "shortname": "inputEx.KeyValueField", "description": "Display a selectors for keys and auto-update the value field"}, "inputEx.RadioField": {"name": "inputEx.RadioField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}], "namespace": "", "module": "inputex-radio", "guessedname": "RadioField", "methods": {"setSelectedClass": {"description": "Add an additional class to the currently selected inputEx-RadioField-choice", "guessedname": "setSelectedClass", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The value schould be one of this.options.values (which defaults to this.options.choices if missing) if allowAny option not true."}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updated event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the Radio", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Listen for change events on all radios", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the checkbox and the hidden field", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": ""}, "description": "Get the field value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the Radio button specific options", "guessedname": "setOptions", "guessedtype": "function"}, "appendChoiceNode": {"params": [{"type": "HTMLElement", "name": "node", "description": " The <option> node to attach to the <select>"}, {"type": "Int", "name": "position", "description": " The position of the choice in choicesList (may not be the \"real\" position in DOM)"}], "description": "Attach an <option> node to the <select> at the specified position", "guessedname": "appendChoiceNode", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "isEmpty": {"description": "Should return true if empty", "guessedname": "isEmpty", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "Function called when the checkbox is toggled", "guessedname": "onChange", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the updated event or not (default is true, pass false to NOT send the event)"}], "description": "Clear the field by setting the field value to this.options.value", "guessedname": "clear", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-radio.js", "guessedtype": "function", "shortname": "inputEx.RadioField", "description": "Create a radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}, "inputEx.MenuField": {"name": "inputEx.MenuField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>typeInvite : text to display when no selection made</li>\n<li>menuItems : contains descriptions of menu items</li>\n<li>menuTrigger : event to trigger menu show</li>\n<li>menuPosition : array of corners positions (syntax : ['menu popup corner','invite div corner'])</li>\n<li>menuConfig (optional) : object used as a config for the YUI Menu generated by MenuField\n</ul>"}], "description": "Create a menu field"}], "namespace": "", "module": "inputex-menu", "guessedname": "MenuField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Build a menu", "guessedname": "renderComponent", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-menu.js", "guessedtype": "function", "shortname": "inputEx.MenuField", "description": "Create a menu field"}, "inputEx.UpperCaseField": {"name": "inputEx.UpperCaseField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field where the value is always uppercase"}], "namespace": "", "module": "inputex-uppercase", "guessedname": "UpperCaseField", "methods": {"setValue": {"params": [{"type": "String", "name": "val", "description": " The string"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value and call toUpperCase", "guessedname": "setValue", "guessedtype": "function"}, "onKeyPress": {"params": [{"type": "Event", "name": "e", "description": " The original 'input' event"}], "description": "Call setvalue on input to update the field with upper case value", "guessedname": "onKeyPress", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-uppercase.js", "guessedtype": "function", "shortname": "inputEx.UpperCaseField", "description": "A field where the value is always uppercase"}, "inputEx.FileField": {"name": "inputEx.FileField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n</ul>"}], "description": "Create a file input"}], "namespace": "", "module": "inputex-file", "guessedname": "FileField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds size and accept options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-file.js", "guessedtype": "function", "shortname": "inputEx.FileField", "description": "Create a file input"}, "inputEx.mixin.choice": {"name": "inputEx.mixin.choice", "namespace": "", "module": "inputex-choice", "guessedname": "choice", "methods": {"hideChoice": {"params": [{"type": "Object} config An object targeting the choice to hide (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Hide a choice", "guessedname": "hideChoice", "guessedtype": "function"}, "addChoice": {"params": [{"type": "Object} config An object describing the choice to add (e.g. { value: 'second' [, label: 'Second' [, position: 1 || after: 'First' || before: 'Third']] ", "name": ")", "description": ""}], "description": "Add a choice", "guessedname": "addChoice", "guessedtype": "function"}, "removeChoice": {"params": [{"type": "Object} config An object targeting the choice to remove (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Remove a choice", "guessedname": "removeChoice", "guessedtype": "function"}, "disableChoice": {"params": [{"type": "Object} config An object targeting the choice to disable (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Disable a choice", "guessedname": "disableChoice", "guessedtype": "function"}, "showChoice": {"params": [{"type": "Object} config An object targeting the choice to show (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Show a choice", "guessedname": "showChoice", "guessedtype": "function"}, "enableChoice": {"params": [{"type": "Object} config An object targeting the choice to enable (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Enable a choice", "guessedname": "enableChoice", "guessedtype": "function"}, "getChoicePosition": {"params": [{"type": "Object} config An object targeting the choice (e.g. { position : 1 } || { value: 'second' } || { label: 'Second' ", "name": ")", "description": ""}], "description": "Get the position of a choice in choicesList (NOT in the DOM)", "guessedname": "getChoicePosition", "guessedtype": "function"}}, "file": "inputex-choice.js", "guessedtype": "property", "shortname": "inputEx.mixin.choice", "description": "This static class is used to provide basic choices functionnalities such as in \"select\" and \"radio\" fields\nWe use it by mixin the methods below to the target prototype: \neg.  Y.mix(inputEx.SelectField.prototype, inputEx.mixin.choice);\nIt provides the following methods : addChoice, removeChoice, hideChoice, showChoice, disableChoice, enableChoice, and getChoicePosition"}, "inputEx.DatePickerField": {"name": "inputEx.DatePickerField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " No added option for this field (same as DateField)\n<ul>\n<li>calendar: yui calendar configuration object</li>\n</ul>"}], "description": "A DatePicker Field."}], "namespace": "", "module": "inputex-datepicker", "guessedname": "DatePickerField", "methods": {"enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "renderComponent": {"description": "Render the input field and the minical container", "guessedname": "renderComponent", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default date picker CSS classes", "guessedname": "setOptions", "guessedtype": "function"}, "beforeShowOverlay": {"description": "Select the right date and display the right page on calendar, when the field has a value", "guessedname": "beforeShowOverlay", "guessedtype": "function"}, "renderCalendar": {"description": "Called ONCE to render the calendar lazily", "guessedname": "renderCalendar", "guessedtype": "function"}}, "extends": "inputEx.DateField", "superclass": "inputEx.DateField", "file": "inputex-datepicker.js", "guessedtype": "function", "shortname": "inputEx.DatePickerField", "description": "A DatePicker Field."}, "inputEx.RPC.Service": {"name": "inputEx.RPC.Service", "constructors": [{"description": "Provide SMD support \nhttp://groups.google.com/group/json-schema/web/service-mapping-description-proposal\nNot implemented: REST envelope, TCP/IP transport\nTake a string as a url to retrieve an smd or an object that is an smd or partial smd to use \nas a definition for the service"}], "namespace": "", "module": "inputex-rpc", "guessedname": "Service", "methods": {"process": {"description": "Process the SMD definition", "guessedname": "process", "guessedtype": "function"}, "_generateService": {"params": [{"type": "String", "name": "serviceName", "description": ""}, {"type": "Method definition", "name": "method", "description": ""}], "description": "Generate the function from a service definition", "guessedname": "_generateService", "guessedtype": "function"}, "fetch": {"params": [{"type": "String", "name": "Absolute", "description": " or relative url"}], "description": "Download the SMD at the given url", "guessedname": "fetch", "guessedtype": "function"}}, "file": "inputex-rpc.js", "guessedtype": "function", "shortname": "inputEx.RPC.Service", "description": "Provide SMD support \nhttp://groups.google.com/group/json-schema/web/service-mapping-description-proposal\nNot implemented: REST envelope, TCP/IP transport\nTake a string as a url to retrieve an smd or an object that is an smd or partial smd to use \nas a definition for the service"}, "inputEx.ColorPickerField": {"name": "inputEx.ColorPickerField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for ColorPickerField :\n<ul>\n<li>showcontrols: show the input values RGB,HSV,RGB hex</li>\n</ul>"}], "description": "Create a Color picker input field"}], "namespace": "", "module": "inputex-colorpickerfield", "guessedname": "ColorPickerField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the 'inputEx-ColorPickerField' default className", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render the color button and the colorpicker popup", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " Color to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "Color value"}, "description": "Return the color value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-colorpicker.js", "guessedtype": "function", "shortname": "inputEx.ColorPickerField", "description": "Create a Color picker input field"}, "inputEx.TimeField": {"name": "inputEx.TimeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputex-time", "guessedname": "TimeField", "methods": {"setValue": {"params": [{"type": "String", "name": "str", "description": " Hour string (format HH:MM:SS)"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "Hour string"}, "description": "Returns a string like HH:MM:SS", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-time.js", "guessedtype": "function", "shortname": "inputEx.TimeField", "description": "A field limited to number inputs (floating)"}, "inputEx.TypeField": {"name": "inputEx.TypeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Standard inputEx options definition"}], "description": "TypeField is a field to create fields. The user can create any value he wants by switching fields."}], "namespace": "", "module": "inputex-type", "guessedname": "TypeField", "methods": {"setValue": {"params": [{"type": "Object", "name": "value", "description": " Type object configuration"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the label, typeProperties and group", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Adds 2 event listeners: \n- on the button to toggel the propertiesPanel", "guessedname": "initEvents", "guessedtype": "function"}, "updateFieldValue": {"description": "Update the fieldValue", "guessedname": "updateFieldValue", "guessedtype": "function"}, "renderComponent": {"description": "Render the TypeField: create a button with a property panel that contains the field options", "guessedname": "renderComponent", "guessedtype": "function"}, "onTogglePropertiesPanel": {"description": "Toggle the property panel", "guessedname": "onTogglePropertiesPanel", "guessedtype": "function"}, "onChangeGroupOptions": {"description": "Update the fieldValue with the changed properties", "guessedname": "onChangeGroupOptions", "guessedtype": "function"}, "getValue": {"return": {"type": "Object", "description": "Type object configuration"}, "description": "Return the config for a entry in an Group", "guessedname": "getValue", "guessedtype": "function"}, "rebuildGroupOptions": {"description": "Regenerate the property form", "guessedname": "rebuildGroupOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-type.js", "guessedtype": "function", "shortname": "inputEx.TypeField", "description": "TypeField is a field to create fields. The user can create any value he wants by switching fields."}, "inputEx.MultiAutoComplete": {"name": "inputEx.MultiAutoComplete", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n</ul>"}], "description": "Create a multi autocomplete field"}], "namespace": "", "module": "inputex-multiautocomplete", "guessedname": "MultiAutoComplete", "methods": {"itemSelectHandler": {"description": "Handle item selection in the autocompleter to add it to the list", "guessedname": "itemSelectHandler", "guessedtype": "function"}, "getState": {"description": "Return (stateEmpty|stateRequired) if the value equals the typeInvite attribute", "guessedname": "getState", "guessedtype": "function"}, "renderComponent": {"description": "Build the DDList", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "an array of selected values"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"description": "Additional options", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "validate": {"description": "TODO : how to validate ?", "guessedname": "validate", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "onChange event handler", "guessedname": "onChange", "guessedtype": "function"}}, "extends": "inputEx.AutoComplete", "superclass": "inputEx.AutoComplete", "file": "inputex-multiautocomplete.js", "guessedtype": "function", "shortname": "inputEx.MultiAutoComplete", "description": "Create a multi autocomplete field"}, "inputEx.TinyMCEField": {"name": "inputEx.TinyMCEField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>opts: the options to be added when calling the TinyMCE constructor</li>\n</ul>"}], "description": "Wrapper for the TinyMCE Editor"}], "namespace": "", "module": "inputex-tinymce", "guessedname": "TinyMCEField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render the field using the YUI Editor widget", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The html string"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the html content", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "the html string"}, "description": "Get the html string", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-tinymce.js", "guessedtype": "function", "shortname": "inputEx.TinyMCEField", "description": "Wrapper for the TinyMCE Editor"}, "inputEx.PasswordField": {"name": "inputEx.PasswordField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object\n<ul>\n<li>confirmPasswordField: the PasswordField instance to compare to when using 2 password fields for password creation (please use the setConfirmationField method)</li>\n<li>strengthIndicator: display a widget to indicate password strength (default false)</li>\n<li>capsLockWarning: display a warning if CapsLock is on (default false)</li>\n<li>confirm: id of the field to compare to</li>\n</ul>"}], "description": "Create a password field."}], "namespace": "", "module": "inputex-password", "guessedname": "PasswordField", "methods": {"setConfirmationField": {"params": [{"type": "inputEx.PasswordField", "name": "passwordField", "description": " The target password field"}], "description": "Set this field as the confirmation for the targeted password field:", "guessedname": "setConfirmationField", "guessedtype": "function"}, "onInput": {"params": [{"type": "Event", "name": "e", "description": " The original input event"}], "description": "Update the state of the confirmation field", "guessedname": "onInput", "guessedtype": "function"}, "onKeyPress": {"description": "callback to display the capsLockWarning", "guessedname": "onKeyPress", "guessedtype": "function"}, "updateStrengthIndicator": {"description": "Update the strength indicator (called by onKeyPress)", "guessedname": "updateStrengthIndicator", "guessedtype": "function"}, "renderComponent": {"description": "Set the el type to 'password'", "guessedname": "renderComponent", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Add the password regexp, strengthIndicator, capsLockWarning", "guessedname": "setOptions", "guessedtype": "function"}, "setCapsLockWarning": {"description": "Show or hide the caps lock warning given the status", "guessedname": "setCapsLockWarning", "guessedtype": "function"}, "onKeyUp": {"description": "onkeyup callback to update the strength indicator", "guessedname": "onKeyUp", "guessedtype": "function"}, "getStateString": {"description": "Change the state string", "guessedname": "getStateString", "guessedtype": "function"}, "getPasswordStrength": {"description": "Return an integer within [0,100] that quantify the password strength\nFunction taken from Mozilla Code: (changed a little bit the values)\nhttp://lxr.mozilla.org/seamonkey/source/security/manager/pki/resources/content/password.js", "guessedname": "getPasswordStrength", "guessedtype": "function"}, "validate": {"description": "The validation adds the confirmation password field support", "guessedname": "validate", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-password.js", "guessedtype": "function", "shortname": "inputEx.PasswordField", "properties": {"byId": {"description": "Keep track of all instances, indexed by ids, for the password confirmation field", "guessedname": "byId", "guessedtype": "property"}}, "description": "Create a password field."}, "inputEx.UneditableField": {"name": "inputEx.UneditableField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a uneditable field where you can stick the html you want\nAdded Options:\n<ul>\n<li>visu: inputEx visu type</li>\n</ul>"}], "namespace": "", "module": "inputex-uneditable", "guessedname": "UneditableField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "val", "description": " The value that will be sent to the visu"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Store the value and update the visu", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The previously stored value"}, "description": "Return the stored value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-uneditable.js", "guessedtype": "function", "shortname": "inputEx.UneditableField", "description": "Create a uneditable field where you can stick the html you want\nAdded Options:\n<ul>\n<li>visu: inputEx visu type</li>\n</ul>"}, "inputEx.ColorField": {"name": "inputEx.ColorField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for ColorField :\n<ul>\n<li>colors: list of colors to load as palette</li>\n<li>palette: default palette to be used (if colors option not provided)</li>\n<li>cellPerLine: how many colored cells in a row on the palette</li>\n<li>ratio: screen-like ratio to display the palette, syntax: [with,height], default: [16,9] (if cellPerLine not provided)</li>\n</ul>"}], "description": "Create a Color picker input field"}], "namespace": "", "module": "inputex-color", "guessedname": "ColorField", "methods": {"onColorClick": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Handle a color selection", "guessedname": "onColorClick", "guessedtype": "function"}, "setDefaultColors": {"return": {"type": "Array", "description": "List of colors to choose from"}, "params": [{"type": "int", "name": "index", "description": " Index of the palette to use"}], "description": "Set the colors to set in the picker", "guessedname": "setDefaultColors", "guessedtype": "function"}, "renderComponent": {"description": "Render the color button and the colorpicker popup", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "Color value"}, "description": "Return the color value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the 'inputEx-ColorField' default className", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " Color to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "renderColorGrid": {"description": "This creates a color grid", "guessedname": "renderColorGrid", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "close": {"description": "Call overlay when field is removed", "guessedname": "close", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-color.js", "guessedtype": "function", "shortname": "inputEx.ColorField", "properties": {"palettes": {"description": "Default palettes", "guessedname": "palettes", "guessedtype": "property"}}, "description": "Create a Color picker input field"}, "inputEx.IPv4Field": {"name": "inputEx.IPv4Field", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Adds an IPv4 address regexp"}], "namespace": "", "module": "inputex-ipv4", "guessedname": "IPv4Field", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "set IPv4 regexp and invalid string", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-ipv4.js", "guessedtype": "function", "shortname": "inputEx.IPv4Field", "description": "Adds an IPv4 address regexp"}, "inputEx.UrlField": {"name": "inputEx.UrlField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object\n<ul>\n<li>favicon: boolean whether the domain favicon.ico should be displayed or not (default is true, except for https)</li>\n</ul>"}], "description": "Adds an url regexp, and display the favicon at this url"}], "namespace": "", "module": "inputex-url", "guessedname": "UrlField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the invalid Url message", "guessedname": "setOptions", "guessedtype": "function"}, "displayFavicon": {"description": "Display the favicon if the icon was found (use of the naturalWidth property)", "guessedname": "displayFavicon", "guessedtype": "function"}, "render": {"description": "Adds a img tag before the field to display the favicon", "guessedname": "render", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-url.js", "guessedtype": "function", "shortname": "inputEx.UrlField", "description": "Adds an url regexp, and display the favicon at this url"}, "inputEx.JsonSchema.Builder": {"file": "inputex-jsonschema.js", "namespace": "", "module": "inputex-jsonschema", "methods": {"defaultReferenceResolver": {"description": "return a schema based on the reference value default is to look up in map", "guessedname": "defaultReferenceResolver", "guessedtype": "function"}, "schemaToInputEx": {"params": [{"type": "JSONSchema", "name": "p", "description": ""}], "description": "Convert a JSON schema to inputEx JSON", "guessedname": "schemaToInputEx", "guessedtype": "function"}, "formFromInstance": {"description": "Create an inputEx Json form definition from a json schema instance object\nRespect the \"Self-Defined Schema Convention\"", "guessedname": "formFromInstance", "guessedtype": "function"}}, "guessedname": "Builder", "guessedtype": "function", "shortname": "inputEx.JsonSchema.Builder", "properties": {"referenceResolver": {"guessedname": "referenceResolver", "guessedtype": "property"}, "defaultOptions": {"description": "options to be applied unless already specified", "guessedname": "defaultOptions", "guessedtype": "property"}, "schemaToParamMap": {"description": "specify how other schema properties are mapped to inputParam properties", "guessedname": "schemaToParamMap", "guessedtype": "property"}, "schemaIdentifierMap": {"description": "key is reference, value is schema", "guessedname": "schemaIdentifierMap", "guessedtype": "property"}}, "name": "inputEx.JsonSchema.Builder"}, "inputEx.Lens": {"name": "inputEx.Lens", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>lens: html code for the lens. Fields will be displayed in the div elements that has the classname named \"field-(field name)\"</li>\n<li>visus: list of visualization for each field</li>\n</ul>"}], "description": "Display a group with inplace edit and custom template"}], "namespace": "", "module": "inputex-lens", "guessedname": "Lens", "methods": {"setOptions": {"description": "Set additional options", "guessedname": "setOptions", "guessedtype": "function"}, "renderFields": {"description": "Render each the fields in each div which class attribute is \"field-\"+fieldName", "guessedname": "renderFields", "guessedtype": "function"}}, "extends": "inputEx.Group", "superclass": "inputEx.Group", "file": "inputex-lens.js", "guessedtype": "function", "shortname": "inputEx.Lens", "description": "Display a group with inplace edit and custom template"}, "inputEx.visus": {"name": "inputEx.visus", "namespace": "", "module": "inputex-visus", "guessedname": "visus", "methods": {"trimpath": {"description": "Use the trimpath-template engine\nsee http://code.google.com/p/trimpath/wiki/JavaScriptTemplates for syntax\noptions = {visuType: 'trimpath', template: \"String template\"}", "guessedname": "trimpath", "guessedtype": "function"}, "dump": {"description": "Use Y.Lang.dump\noptions = {visuType: 'dump'}", "guessedname": "dump", "guessedtype": "function"}, "func": {"description": "Use a rendering function\noptions = {visuType: 'func', func: function(data) { ...code here...} }"}, "renderVisu": {"return": {"type": "HTMLElement || String", "description": "Either the inserted HTMLElement or the String set to parentEl.innerHTML"}, "description": "Render 'data' using a visualization function described by 'visuOptions'", "static": "", "guessedname": "renderVisu", "guessedtype": "function", "params": [{"type": "Object", "name": "visuOptions", "description": " The visu parameters object with: visuType: 'myType', ...args..."}, {"type": "Object", "name": "data", "description": " The input data to send to the template"}, {"type": "HTMLElement || String", "name": "parentEl", "description": " optional Set the result as content of parentEl"}]}}, "static": "", "file": "inputex-visus.js", "guessedtype": "property", "shortname": "inputEx.visus", "description": "Contains the various visualization methods"}, "inputEx.RPC.Envelope": {"name": "inputEx.RPC.Envelope", "namespace": "", "module": "inputex-rpc", "guessedname": "Envelope", "static": "", "file": "inputex-rpc.js", "guessedtype": "property", "shortname": "inputEx.RPC.Envelope", "description": "inputEx.RPC.Envelope"}, "inputEx.RPC.Envelope.JSON": {"name": "inputEx.RPC.Envelope.JSON", "namespace": "", "module": "inputex-rpc", "methods": {"serialize": {"description": "serialize", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"description": "deserialize", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "shortname": "inputEx.RPC.Envelope.JSON", "description": "JSON envelope"}, "inputEx.ObjectField": {"name": "inputEx.ObjectField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "list of PairField where where the returned value is converted to an object"}], "namespace": "", "module": "inputex-object", "guessedname": "ObjectField", "methods": {"setValue": {"description": "Convert the object into a list of pairs", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"description": "Convert the array of 2d elements to an javascript object", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.ListField", "superclass": "inputEx.ListField", "file": "inputex-object.js", "guessedtype": "function", "shortname": "inputEx.ObjectField", "description": "list of PairField where where the returned value is converted to an object"}, "inputEx.CombineField": {"name": "inputEx.CombineField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>separators: array of string inserted</li>\n</ul>"}], "description": "A meta field to put N fields on the same line, separated by separators"}], "namespace": "", "module": "inputex-combine", "guessedname": "CombineField", "methods": {"renderFields": {"description": "Render the subfields", "guessedname": "renderFields", "guessedtype": "function"}, "_afterCreateTbodyTrNode": {"description": "Add the remove column to the table\nCreate the TD node to delete", "guessedname": "_afterCreateTbodyTrNode", "guessedtype": "function"}, "confirmDelete": {"description": "Remove the Record from the record set", "guessedname": "confirmDelete", "guessedtype": "function"}, "getValue": {"return": {"type": "Array", "description": "An array of values [value1, value2, ...]"}, "description": "Specific getValue", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "fieldToColumndef": {"description": "Convert a single inputEx field definition to a DataTable column definition", "guessedname": "fieldToColumndef", "guessedtype": "function"}, "setValue": {"params": [{"type": "Array", "name": "values", "description": " [value1, value2, ...]"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "fieldsToColumndefs": {"description": "Convert an inputEx fields definition to a DataTable columns definition", "guessedname": "fieldsToColumndefs", "guessedtype": "function"}, "_onRemoveLabelClick": {"description": "Send the remove event", "guessedname": "_onRemoveLabelClick", "guessedtype": "function"}, "appendSeparator": {"description": "Add a separator to the divEl", "guessedname": "appendSeparator", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Initializer.", "private": "", "guessedtype": "function"}, "_afterAddTheadTrNode": {"description": "Add a \"delete\" column to the datatable", "guessedname": "_afterAddTheadTrNode", "guessedtype": "function"}, "renderField": {"params": [{"type": "Object", "name": "fieldOptions", "description": " The field properties as required by inputEx()"}], "description": "Override to force required option on each subfield", "guessedname": "renderField", "guessedtype": "function"}}, "extends": "inputEx.Group", "superclass": "inputEx.Group", "file": "inputex-combine.js", "guessedtype": "function", "shortname": "inputEx.CombineField", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"inputex\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"datatableInputex\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "A meta field to put N fields on the same line, separated by separators"}, "inputEx.Field": {"name": "inputEx.Field", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Configuration object\n<ul>\n<li>name: the name of the field</li>\n<li>required: boolean, the field cannot be null if true</li>\n<li>className: CSS class name for the div wrapper (default 'inputEx-Field')</li>\n<li>value: initial value</li>\n<li>parentEl: HTMLElement or String id, append the field to this DOM element</li>\n</ul>"}], "description": "An abstract class (never instantiated) that contains the shared features for all fields."}], "namespace": "", "module": "inputex-field", "properties": {"options": {"description": "Configuration object to set the options for this class and the parent classes. See constructor details for options added by this class.", "guessedname": "options", "guessedtype": "property"}}, "guessedname": "Field", "methods": {"validate": {"return": {"type": "Boolean", "description": "field validation status (true/false)"}, "description": "Validation of the field", "guessedname": "validate", "guessedtype": "function"}, "render": {"description": "Default render of the dom element. Create a divEl that wraps the field.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Show the field", "guessedname": "show", "guessedtype": "function"}, "focus": {"description": "Focus the field", "guessedname": "focus", "guessedtype": "function"}, "setClassFromState": {"params": [{"type": "String", "name": "One", "description": " of the following states: 'empty', 'required', 'valid' or 'invalid'"}], "description": "Set the styles for valid/invalid state.  If a state is not provided, getState will be called.", "guessedname": "setClassFromState", "guessedtype": "function"}, "getState": {"return": {"type": "String", "description": "One of the following states: 'empty', 'required', 'valid' or 'invalid'"}, "description": "Returns the current state (given its value)", "guessedname": "getState", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "getParentField": {"return": {"type": "inputEx.Group|inputEx.Form|inputEx.ListField|inputEx.CombineField", "description": ""}, "description": "Return the parent field instance", "guessedname": "getParentField", "guessedtype": "function"}, "close": {"description": "Close the field and eventually opened popups...", "guessedname": "close", "guessedtype": "function"}, "getStateString": {"description": "Get the string for the given state", "guessedname": "getStateString", "guessedtype": "function"}, "hide": {"description": "Hide the field", "guessedname": "hide", "guessedtype": "function"}, "initEvents": {"description": "Initialize events of the Input", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the interface component into this.divEl", "guessedname": "renderComponent", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "divEl The main DIV wrapper"}, "description": "The default render creates a div to put in the messages", "guessedname": "getEl", "guessedtype": "function"}, "isEmpty": {"description": "Should return true if empty", "guessedname": "isEmpty", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "onChange event handler", "guessedname": "onChange", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "onFocus": {"params": [{"type": "Event", "name": "e", "description": " The original 'focus' event"}], "description": "Function called on the focus event", "guessedname": "onFocus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "String", "name": "msg", "description": " Message to display"}], "description": "Update the message", "guessedname": "displayMessage", "guessedtype": "function"}, "onBlur": {"params": [{"type": "Event", "name": "e", "description": " The original 'blur' event"}], "description": "Function called on the blur event", "guessedname": "onBlur", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Clear the field by setting the field value to this.options.value", "guessedname": "clear", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "value of the field"}, "description": "Return the value of the input", "guessedname": "getValue", "guessedtype": "function"}, "setFieldName": {"description": "Set the name of the field (or hidden field)", "guessedname": "setFieldName", "guessedtype": "function"}, "fireUpdatedEvt": {"description": "Fire the \"updated\" event (only if the field validated)\nEscape the stack using a setTimeout", "guessedname": "fireUpdatedEvt", "guessedtype": "function"}, "setParentField": {"params": [{"type": "inputEx.Group|inputEx.Form|inputEx.ListField|inputEx.CombineField", "name": "parentField", "description": " The parent field instance"}], "description": "Set the parentField.\nGenerally use by composable fields (ie. Group,Form,ListField,CombineField,...}", "guessedname": "setParentField", "guessedtype": "function"}, "isDisabled": {"description": "Check if the field is diabled", "guessedname": "isDisabled", "guessedtype": "function"}}, "file": "inputex-field.js", "guessedtype": "function", "shortname": "inputEx.Field", "events": {"updated": {"params": [{"type": "Any", "name": "value", "description": " The new value of the field"}], "description": "Event fired after the user changed the value of the field.\nFired when the field is \"updated\"<br /> subscribe with: myfield.on('updated', function(value) { console.log(\"updated\",value); }, this, true);"}}, "description": "An abstract class (never instantiated) that contains the shared features for all fields."}, "inputEx.EmailField": {"name": "inputEx.EmailField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Field that adds the email regexp for validation. Result is always lower case."}], "namespace": "", "module": "inputex-email", "guessedname": "EmailField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the email regexp and invalid message", "guessedname": "setOptions", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "The email string"}, "description": "Set the value to lower case since email have no case", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-email.js", "guessedtype": "function", "shortname": "inputEx.EmailField", "description": "Field that adds the email regexp for validation. Result is always lower case."}, "inputEx.RTEField": {"name": "inputEx.RTEField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>opts: the options to be added when calling the RTE constructor (see YUI RTE)</li>\n<li>editorType: if == 'simple', the field will use the SimpleEditor. Any other value will use the Editor class.</li>\n</ul>"}], "description": "Wrapper for the Rich Text Editor from YUI"}], "namespace": "", "module": "inputex-rte", "guessedname": "RTEField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render the field using the YUI Editor widget", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The html string"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the html content", "guessedname": "setValue", "guessedtype": "function"}, "filter_msword": {"return": {"type": "String", "description": "The html string"}, "params": [{"type": "String", "name": "value", "description": " The html string"}], "description": "Filters out msword html comments, classes, and other junk\n(complementary with YAHOO.widget.SimpleEditor.prototype.filter_msword, when filterWord option is true)", "guessedname": "filter_msword", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "the html string"}, "description": "Get the html string", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-rte.js", "guessedtype": "function", "shortname": "inputEx.RTEField", "description": "Wrapper for the Rich Text Editor from YUI"}, "inputEx.InPlaceEdit": {"name": "inputEx.InPlaceEdit", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>visu</li>\n<li>editorField</li>\n<li>animColors</li>\n</ul>"}], "description": "Meta field providing in place editing (the editor appears when you click on the formatted value)."}], "namespace": "", "module": "inputex-inplaceedit", "guessedname": "InPlaceEdit", "methods": {"onOkEditor": {"description": "Validate the editor (ok button, enter key or tabulation key)", "guessedname": "onOkEditor", "guessedtype": "function"}, "enable": {"description": "Override enable to Enable openEditor", "guessedname": "enable", "guessedtype": "function"}, "onVisuMouseOver": {"params": [{"type": "Event", "name": "e", "description": " The original mouseover event"}], "description": "Set the color when hovering the field", "guessedname": "onVisuMouseOver", "guessedtype": "function"}, "openEditor": {"description": "Display the editor", "guessedname": "openEditor", "guessedtype": "function"}, "initEvents": {"description": "Adds the events for the editor and color animations", "guessedname": "initEvents", "guessedtype": "function"}, "onVisuMouseOut": {"params": [{"type": "Event", "name": "e", "description": " The original mouseout event"}], "description": "Start the color animation when hovering the field", "guessedname": "onVisuMouseOut", "guessedtype": "function"}, "renderComponent": {"description": "Override renderComponent to create 2 divs: the visualization one, and the edit in place form", "guessedname": "renderComponent", "guessedtype": "function"}, "onKeyDown": {"params": [{"type": "Event", "name": "e", "description": " The original keydown event"}], "description": "Handle the tabulation key to close the editor", "guessedname": "onKeyDown", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The value of the subfield"}, "description": "Returned the previously stored value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderVisuDiv": {"description": "Create the div that will contain the visualization of the value", "guessedname": "renderVisuDiv", "guessedtype": "function"}, "disable": {"description": "Override disable to Disable openEditor", "guessedname": "disable", "guessedtype": "function"}, "close": {"description": "Close the editor when calling the close function on this field", "guessedname": "close", "guessedtype": "function"}, "onKeyUp": {"params": [{"type": "Event", "name": "e", "description": " The original keyup event"}], "description": "Handle some keys events to close the editor", "guessedname": "onKeyUp", "guessedtype": "function"}, "closeEditor": {"params": [{"type": "Event", "name": "e", "description": " The original event (click, blur or keydown)"}], "description": "Close the editor on cancel (cancel button, blur event or escape key)", "guessedname": "closeEditor", "guessedtype": "function"}, "onCancelEditor": {"params": [{"type": "Event", "name": "e", "description": " The original event (click, blur or keydown)"}], "description": "Close the editor on cancel (cancel button, blur event or escape key)", "guessedname": "onCancelEditor", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value and update the display", "guessedname": "setValue", "guessedtype": "function"}, "renderEditor": {"description": "Render the editor", "guessedname": "renderEditor", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-inplaceedit.js", "guessedtype": "function", "shortname": "inputEx.InPlaceEdit", "description": "Meta field providing in place editing (the editor appears when you click on the formatted value)."}, "inputEx.ListField": {"name": "inputEx.ListField", "constructors": [{"params": [{"type": "type: 'string'", "name": "options", "description": " Added options:\n<ul>\n<li>sortable: Add arrows to sort the items if true (default false)</li>\n<li>elementType: an element type definition (default is )</li>\n<li>useButtons: use buttons instead of links (default false)</li>\n<li>unique: require values to be unique (default false)</li>\n<li>listAddLabel: if useButtons is false, text to add an item</li>\n<li>listRemoveLabel: if useButtons is false, text to remove an item</li>\n<li>maxItems: maximum number of items (leave undefined if no maximum, default)</li>\n<li>minItems: minimum number of items to validate (leave undefined if no minimum, default)</li>\n</ul>"}], "description": "Meta field to create a list of other fields"}], "namespace": "", "module": "inputex-list", "guessedname": "ListField", "methods": {"onDelete": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Called when the user clicked on a delete button.", "guessedname": "onDelete", "guessedtype": "function"}, "setValue": {"params": [{"type": "Array", "name": "value", "description": " The list of values to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of all the subfields", "guessedname": "setValue", "guessedtype": "function"}, "onArrowDown": {"params": [{"type": "Event", "name": "e", "description": " Original click event"}], "description": "Switch a subField with its next one\nCalled when the user clicked on the down arrow of a sortable list", "guessedname": "onArrowDown", "guessedtype": "function"}, "initEvents": {"description": "Handle the click event on the add button", "guessedname": "initEvents", "guessedtype": "function"}, "removeElement": {"params": [{"type": "integer", "name": "index", "description": " The index of the element to remove"}], "description": "Remove the line from the dom and the subField from the list.", "guessedname": "removeElement", "guessedtype": "function"}, "renderComponent": {"description": "Render the addButton", "guessedname": "renderComponent", "guessedtype": "function"}, "addItem": {"params": [{"type": "String|Object", "name": "item", "description": " Either a string with the given value or an object with \"label\" and \"value\" attributes"}], "description": "Add an item to the list", "guessedname": "addItem", "guessedtype": "function"}, "renderSubField": {"return": {"type": "inputEx.Field", "description": "instance of the created field (inputEx.Field or derivative)"}, "params": [{"type": "Any", "name": "The", "description": " initial value of the subfield to create"}], "description": "Adds a new line to the List Field", "guessedname": "renderSubField", "guessedtype": "function"}, "getValue": {"return": {"type": "Array", "description": "The array"}, "description": "Return the array of values", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the ListField classname", "guessedname": "setOptions", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Clear the field by setting the field value to this.options.value", "guessedname": "clear", "guessedtype": "function"}, "onAddButton": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Add a new element to the list and fire updated event", "guessedname": "onAddButton", "guessedtype": "function"}, "validate": {"returns": "{Boolean} true if all fields validate, required fields are not empty and unique constraint (if specified) is not violated", "description": "Validate each field", "guessedname": "validate", "guessedtype": "function"}, "onArrowUp": {"params": [{"type": "Event", "name": "e", "description": " Original click event"}], "description": "Switch a subField with its previous one\nCalled when the user clicked on the up arrow of a sortable list", "guessedname": "onArrowUp", "guessedtype": "function"}, "addElement": {"return": {"type": "inputEx.Field", "description": "SubField added instance"}, "params": [{"type": "Any", "name": "The", "description": " initial value of the subfield to create"}], "description": "Adds an element", "guessedname": "addElement", "guessedtype": "function"}, "resetAllNames": {"description": "Re-set the name of all the fields (when we remove an element)", "guessedname": "resetAllNames", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-list.js", "guessedtype": "function", "shortname": "inputEx.ListField", "properties": {"subFields": {"description": "List of all the subField instances", "guessedname": "subFields", "guessedtype": "property"}, "arrowAnimColors": {"description": "Colors for the animation", "guessedname": "arrowAnimColors", "guessedtype": "property"}}, "description": "Meta field to create a list of other fields"}, "inputEx.IntegerField": {"name": "inputEx.IntegerField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>negative: boolean indicating if we accept negative numbers</li>\n</ul>"}], "description": "A field limited to number inputs"}], "namespace": "", "module": "inputex-integer", "guessedname": "IntegerField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "description": "Adds the negative, min, and max options", "guessedname": "setOptions", "guessedtype": "function"}, "validate": {"description": "Validate  if is a number", "guessedname": "validate", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "The integer value"}, "description": "Get the value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-integer.js", "guessedtype": "function", "shortname": "inputEx.IntegerField", "description": "A field limited to number inputs"}, "inputEx.TreeField": {"name": "inputEx.TreeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Meta field to create trees"}], "namespace": "", "module": "inputex-tree", "guessedname": "TreeField", "methods": {"renderComponent": {"description": "Render the addButton and childContainer", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "obj", "description": " The tree object"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "renderSubField": {"return": {"type": "inputEx.Field", "description": "instance of the created field (inputEx.Field or derivative)"}, "params": [{"type": "Any", "name": "value", "description": " Value of the subelement"}], "description": "Adds a new line to the List Field", "guessedname": "renderSubField", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The tree object"}, "description": "Get the value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.ListField", "superclass": "inputEx.ListField", "file": "inputex-tree.js", "guessedtype": "function", "shortname": "inputEx.TreeField", "description": "Meta field to create trees"}, "inputEx.JsonSchema": {"name": "inputEx.JsonSchema", "namespace": "", "module": "inputex-jsonschema", "guessedname": "JsonSchema", "methods": {"inputExToSchema": {"description": "Convert the inputEx JSON fields to a JSON schema", "guessedname": "inputExToSchema", "guessedtype": "function"}}, "static": "", "file": "inputex-jsonschema.js", "guessedtype": "property", "shortname": "inputEx.JsonSchema", "description": "Namespace containing utility functions for conversion between inputEx JSON format and JSON Schema\nbased on \"Json Schema Proposal Working Draft\":\nhttp://groups.google.com/group/json-schema/web/json-schema-proposal-working-draft\nThe proposal is still under discussion and the implementation is very minimalist.\nTODO:\n- we should provide a lot of json schema examples and instances that should/should not validate\n- use the $ref (async calls => provide callbacks to methods)\n- Inheritance\nLimitations:\n- ??? Please do not trust inputEx: the getValue may return a value which do NOT validate the schema (provide an example ?)\n- no tuple typing for arrays\n- no \"Union type definition\""}, "inputEx.RPC.Envelope.JSON-RPC-2.0": {"name": "inputEx.RPC.Envelope.JSON-RPC-2.0", "namespace": "", "module": "inputex-rpc", "methods": {"serialize": {"description": "serialize", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"description": "serialize", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "shortname": "inputEx.RPC.Envelope.JSON-RPC-2.0", "description": "JSON-RPC-2.0 envelope"}, "inputEx.SelectTwiceField": {"name": "inputEx.SelectTwiceField", "constructors": [{"params": [{"type": "Object} options Added options:\n<ul>\n<li>choices: contains the list of nested choices ([{ value: \"\", choices: [\"\"] }, { value: \"BMW Z Series\", choices: [\"Z1\", \"Z3\", \"Z4\", \"Z8\"] ", "name": ",", "description": " ...])</li>\n<li>valueSeperator: </li>\n</ul>"}], "description": "Create a select field"}], "namespace": "", "module": "inputex-selecttwice", "guessedname": "SelectTwiceField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "getState": {"description": "HACK because empty state value is this.options.valueSeparator", "guessedname": "getState", "guessedtype": "function"}, "renderComponent": {"description": "Build two select fields", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Whether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the selected value"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-selecttwice.js", "guessedtype": "function", "shortname": "inputEx.SelectTwiceField", "description": "Create a select field"}, "inputEx.TimeIntervalField": {"name": "inputEx.TimeIntervalField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options\n<ul>\n<li>unit: inputEx.TimeIntervalField.units.MYUNIT (SECOND,MINUTE,HOUR,DAY,MONTH,YEAR)</li>\n</ul>"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputex-timeinterval", "guessedname": "TimeIntervalField", "methods": {"setOptions": {"description": "Additional options", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"param": "{array} array with 4 Hour strings in display order (format [\"HH\",\"MM\", \"HH\",\"MM\"])", "params": [{"type": "Number", "name": "val", "description": " The time interval integer (with the given unit)"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of both subfields", "guessedname": "setValue", "guessedtype": "function"}, "toogleEndMinutes": {"description": "Disable the last selector and set it to \"00\" when the third one's value is 24\n(it will be inccorect to have an end superior to 24:00)", "guessedname": "toogleEndMinutes", "guessedtype": "function"}, "getValue": {"return": {"type": "Integer", "description": "the time interval in the field unit"}, "description": "Concat the values to return a date", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-timeinterval.js", "guessedtype": "function", "shortname": "inputEx.TimeIntervalField", "description": "A field limited to number inputs (floating)"}, "inputEx.StringAvailability": {"name": "inputEx.StringAvailability", "constructors": [{"params": [{"type": "Object", "name": "options", "description": ""}], "description": "String field that sends an Ajax request to check if it is available"}], "namespace": "", "module": "inputex-stringavailability", "guessedname": "StringAvailability", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "guessedname": "setOptions", "guessedtype": "function"}, "onUnavailable": {"description": "What to do when the string is NOT available", "guessedname": "onUnavailable", "guessedtype": "function"}, "getAvailability": {"description": "Perform the Ajax request", "guessedname": "getAvailability", "guessedtype": "function"}, "onAvailable": {"description": "What to do when the string is available", "guessedname": "onAvailable", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-stringavailability.js", "guessedtype": "function", "shortname": "inputEx.StringAvailability", "description": "String field that sends an Ajax request to check if it is available"}, "inputEx.widget.JsonTreeInspector": {"name": "inputEx.widget.JsonTreeInspector", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "parentEl", "description": " where to append the tree"}, {"type": "Object", "name": "object", "description": " the object to inspect"}, {"type": "String", "name": "jsonPath", "description": " JSON Path string (optional) (http://code.google.com/p/jsonpath/wiki/Javascript)"}], "description": "Create a treeview to inspect a javascript object"}], "namespace": "", "module": "inputex-jsontreeinspector", "guessedname": "JsonTreeInspector", "methods": {"expandAll": {"params": [{"type": "Integer", "name": "maxLevel", "description": ""}], "description": "Expand the root node", "guessedname": "expandAll", "guessedtype": "function"}, "expandBranch": {"params": [{"type": "HTMLElement", "name": "li", "description": ""}, {"type": "Integer", "name": "maxLevel", "description": ""}], "description": "Expand a branch given a li element", "guessedname": "expandBranch", "guessedtype": "function"}, "buildBranch": {"description": "Build the sub-branch for obj", "guessedname": "buildBranch", "guessedtype": "function"}, "expandElement": {"description": "expand the node given the li element", "guessedname": "expandElement", "guessedtype": "function"}, "jsonPath": {"description": "JSONPath 0.8.0 - XPath for JSON\nhttp://code.google.com/p/jsonpath/\nhttp://code.google.com/p/jsonpath/wiki/Javascript\nCopyright (c) 2007 Stefan Goessner (goessner.net)\nLicensed under the MIT (MIT-LICENSE.txt) licence.", "guessedname": "jsonPath", "guessedtype": "function"}, "destroy": {"description": "Destroy the widget", "guessedname": "destroy", "guessedtype": "function"}, "onItemClick": {"description": "When the user click on a node", "guessedname": "onItemClick", "guessedtype": "function"}}, "file": "inputex-jsontreeinspector.js", "guessedtype": "function", "shortname": "inputEx.widget.JsonTreeInspector", "properties": {"el": {"description": "Main div element", "guessedname": "el", "guessedtype": "property"}, "hash": {"description": "Hash to contain the values indexed by li ids", "guessedname": "hash", "guessedtype": "property"}}, "description": "Create a treeview to inspect a javascript object"}, "inputExBase": {"name": "inputExBase", "namespace": "", "module": "inputex-base", "param": "{Object} config User configuration object", "file": "inputex-base.js", "shortname": "inputExBase", "properties": {"inputExBase.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by inputExBase.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "The inputExBase class provides the hideOn attribute which can\nbe used to hide the widget when certain events occur."}, "inputEx.SliderField": {"name": "inputEx.SliderField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a slider using YUI widgets"}], "namespace": "", "module": "inputex-slider", "guessedname": "SliderField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the classname to 'inputEx-SliderField'", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "render a slider widget", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "The integer value"}, "description": "Get the value from the slider", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-slider.js", "guessedtype": "function", "shortname": "inputEx.SliderField", "description": "Create a slider using YUI widgets"}, "inputEx.RPC.Envelope.URL": {"name": "inputEx.RPC.Envelope.URL", "namespace": "", "module": "inputex-rpc", "methods": {"serialize": {"description": "Serialize data into URI encoded parameters", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"description": "Deserialize", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "shortname": "inputEx.RPC.Envelope.URL", "description": "URL envelope"}, "inputEx.RPC.Envelope.PATH": {"name": "inputEx.RPC.Envelope.PATH", "namespace": "", "module": "inputex-rpc", "methods": {"serialize": {"description": "serialize", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"description": "deserialize", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "shortname": "inputEx.RPC.Envelope.PATH", "description": "PATH envelope"}, "inputEx.widget.dtInPlaceEdit": {"name": "inputEx.widget.dtInPlaceEdit", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Options"}], "description": "InPlaceEditable datatable using inputEx fields"}], "namespace": "", "module": "inputex-dtinplaceedit", "guessedname": "dtInPlaceEdit", "methods": {"onRemoveFailure": {"description": "When failed to delete a row", "guessedname": "onRemoveFailure", "guessedtype": "function"}, "onCellClick": {"description": "Public handler - When clicking on one of the datatable's cells", "guessedname": "onCellClick", "guessedtype": "function"}, "onCancelButton": {"description": "When clicking \"Cancel\" button to cancel a new row", "guessedname": "onCancelButton", "guessedtype": "function"}, "initEvents": {"description": "Init the events", "guessedname": "initEvents", "guessedtype": "function"}, "_onCellClick": {"description": "Handling cell click events", "guessedname": "_onCellClick", "guessedtype": "function"}, "onModifyItem": {"description": "When modifying a row", "guessedname": "onModifyItem", "guessedtype": "function"}, "onRemoveItem": {"description": "When trying to delete a row", "guessedname": "onRemoveItem", "guessedtype": "function"}, "onRemoveSuccess": {"description": "When successfully deleted a row", "guessedname": "onRemoveSuccess", "guessedtype": "function"}, "onDialogSave": {"description": "When saving the Dialog (option insertWithDialog)", "guessedname": "onDialogSave", "guessedtype": "function"}, "onInsertButton": {"description": "When clicking on the \"insert\" button to add a new row", "guessedname": "onInsertButton", "guessedtype": "function"}, "setOptions": {"description": "Additional options", "guessedname": "setOptions", "guessedtype": "function"}, "onModifySuccess": {"description": "When successfully modified a row", "guessedname": "onModifySuccess", "guessedtype": "function"}, "onAddFailure": {"description": "When Failed to Add Row", "guessedname": "onAddFailure", "guessedtype": "function"}, "onAddButton": {"description": "When clicking \"Add\" button to save a new row", "guessedname": "onAddButton", "guessedtype": "function"}, "onAddSuccess": {"description": "Validate the new record's row : \nYou need to call this function when you really added the item with an id\nIe if you trigger an Ajax request to insert your record into database,\nyou trigger this function only if your request didn't failed", "guessedname": "onAddSuccess", "guessedtype": "function"}, "setColumnDefs": {"description": "Modify the column definitions to add the inputEx CellEditor", "guessedname": "setColumnDefs", "guessedtype": "function"}}, "extends": "inputEx.widget.DataTable", "superclass": "inputEx.widget.DataTable", "file": "inputex-dtinplaceedit.js", "guessedtype": "function", "shortname": "inputEx.widget.dtInPlaceEdit", "description": "InPlaceEditable datatable using inputEx fields"}, "inputEx.DateTimeField": {"name": "inputEx.DateTimeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options\n<ul>\n<li>dateFormat: same as DateField</li>\n</ul>"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputex-datetime", "guessedname": "DateTimeField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of both subfields", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Date", "description": "The javascript Date object"}, "description": "Concat the values to return a date", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-datetime.js", "guessedtype": "function", "shortname": "inputEx.DateTimeField", "description": "A field limited to number inputs (floating)"}, "inputEx.MultiSelectField": {"name": "inputEx.MultiSelectField", "constructors": [{"params": [{"type": "Object} options Added options:\n<ul>\n<li>choices: contains the list of choices configs ([{value:'usa'}, {value:'fr', label:'France'", "name": "])</li>", "description": "\n</ul>"}], "description": "Create a multi select field"}], "namespace": "", "module": "inputex-multiselect", "guessedname": "MultiSelectField", "methods": {"onAddNewItem": {"description": "Add an item to the list when the select changed", "guessedname": "onAddNewItem", "guessedtype": "function"}, "initEvents": {"description": "Register the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Build the DDList", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "an array of selected values"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the list", "guessedname": "setValue", "guessedtype": "function"}, "onItemRemoved": {"description": "Re-enable the option element when an item is removed by the user", "guessedname": "onItemRemoved", "guessedtype": "function"}}, "extends": "inputEx.SelectField", "superclass": "inputEx.SelectField", "file": "inputex-multiselect.js", "guessedtype": "function", "shortname": "inputEx.MultiSelectField", "description": "Create a multi select field"}, "inputEx.SelectField": {"name": "inputEx.SelectField", "constructors": [{"params": [{"type": "Object} options Added options:\n<ul>\n<li>choices: contains the list of choices configs ([{value:'usa'}, {value:'fr', label:'France'", "name": "])</li>", "description": "\n</ul>"}], "description": "Create a select field"}], "namespace": "", "module": "inputex-select", "guessedname": "SelectField", "methods": {"setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Register the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Build a select tag with options", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the selected value"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "appendChoiceNode": {"params": [{"type": "HTMLElement", "name": "node", "description": " The <option> node to attach to the <select>"}, {"type": "Int", "name": "position", "description": " The position of the choice in choicesList (may not be the \"real\" position in DOM)"}], "description": "Attach an <option> node to the <select> at the specified position", "guessedname": "appendChoiceNode", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-select.js", "guessedtype": "function", "shortname": "inputEx.SelectField", "description": "Create a select field"}, "inputEx.NumberField": {"name": "inputEx.NumberField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputex-number", "guessedname": "NumberField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "description": "Adds the min, and max options", "guessedname": "setOptions", "guessedtype": "function"}, "validate": {"description": "Check if the entered number is a float", "guessedname": "validate", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": "The parsed float"}, "description": "Return a parsed float (javascript type number)", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-number.js", "guessedtype": "function", "shortname": "inputEx.NumberField", "description": "A field limited to number inputs (floating)"}, "inputEx.Group": {"name": "inputEx.Group", "constructors": [{"params": [{"type": "Object} options The following options are added for Groups and subclasses:\n<ul>\n<li>fields: Array of input fields declared like { label: 'Enter the value:' , type: 'text' or fieldClass: inputEx.Field, optional: true/false, ... ", "name": "</li>", "description": "\n<li>legend: The legend for the fieldset (default is an empty string)</li>\n<li>collapsible: Boolean to make the group collapsible (default is false)</li>\n<li>collapsed: If collapsible only, will be collapsed at creation (default is false)</li>\n<li>flatten:</li>\n</ul>"}], "description": "Handle a group of fields"}], "namespace": "", "module": "inputex-group", "guessedname": "Group", "methods": {"render": {"description": "Render the group", "guessedname": "render", "guessedtype": "function"}, "runInteractions": {"params": [{"type": "inputEx.Field", "name": "fieldInstance", "description": " Field that just changed"}, {"type": "Any", "name": "fieldValue", "description": " Field value"}], "description": "Run the interactions for the given field instance", "guessedname": "runInteractions", "guessedtype": "function"}, "setErrors": {"params": [{"type": "Object || Array", "name": "errors", "description": " Hash object containing error messages as Strings referenced by the field name, or array [ [\"fieldName\", \"Message\"], ...]"}], "description": "Write error messages for fields as specified in the hash", "guessedname": "setErrors", "guessedtype": "function"}, "focus": {"description": "Set the focus to the first input in the group", "guessedname": "focus", "guessedtype": "function"}, "enable": {"description": "Enable all fields in the group", "guessedname": "enable", "guessedtype": "function"}, "close": {"description": "Close the group (recursively calls \"close\" on each field, does NOT hide the group )\nCall this function before hidding the group to close any field popup", "guessedname": "close", "guessedtype": "function"}, "runFieldsInteractions": {"description": "Run the interactions for all fields", "guessedname": "runFieldsInteractions", "guessedtype": "function"}, "renderField": {"params": [{"type": "Object", "name": "fieldOptions", "description": " The field properties as required by the inputEx() method"}], "description": "Instanciate one field given its parameters, type or fieldClass", "guessedname": "renderField", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The group value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the values of each field from a key/value hash object", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Add a listener for the 'collapsible' option", "guessedname": "initEvents", "guessedtype": "function"}, "runAction": {"params": [{"type": "Object", "name": "action", "description": " inputEx action object"}, {"type": "Any", "name": "triggerValue", "description": " The value that triggered the interaction"}], "description": "Run an action (for interactions)", "guessedname": "runAction", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "String", "name": "eventName", "description": " Event name"}, {"type": "Array", "name": "args", "description": " Array of [fieldValue, fieldInstance]"}], "description": "Called when one of the group subfields is updated.", "guessedname": "onChange", "guessedtype": "function"}, "renderFields": {"description": "Render all the fields.\nWe use the parentEl so that inputEx.Form can append them to the FORM tag", "guessedname": "renderFields", "guessedtype": "function"}, "getFieldByName": {"params": [{"type": "String", "name": "fieldName", "description": " The name property"}], "description": "Return the sub-field instance by its name property", "guessedname": "getFieldByName", "guessedtype": "function"}, "getFieldsStates": {"returns": "{Object} with all Forms's fields state, error message\nand validate containing a boolean for the global Form validation", "description": "Alternative method to validate for advanced error handling", "guessedname": "getFieldsStates", "guessedtype": "function"}, "findFieldByName": {"params": [{"type": "String", "name": "fieldName", "description": " The name property"}, {"type": "Boolean", "name": "descendOnly", "description": " Set true to only look at children of this group"}], "description": "Find a field anywhere in the hierarchy this group is a part of.", "guessedname": "findFieldByName", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds some options: legend, collapsible, fields...", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable all fields in the group", "guessedname": "disable", "guessedtype": "function"}, "validate": {"returns": "{Boolean} true if all fields validate and required fields are not empty", "description": "Validate each field", "guessedname": "validate", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Clear all subfields", "guessedname": "clear", "guessedtype": "function"}, "addField": {"params": [{"type": "Object", "name": "fieldOptions", "description": " The field properties as required by the inputEx() method"}], "description": "Render a field and add it to the field set", "guessedname": "addField", "guessedtype": "function"}, "getValue": {"description": "Return an object with all the values of the fields", "guessedname": "getValue", "guessedtype": "function"}, "setFieldName": {"description": "Compatibility with classic forms in listField for instance", "guessedname": "setFieldName", "guessedtype": "function"}, "toggleCollapse": {"description": "Toggle the collapse state", "guessedname": "toggleCollapse", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-group.js", "guessedtype": "function", "shortname": "inputEx.Group", "description": "Handle a group of fields"}, "inputEx.Panel": {"name": "inputEx.Panel", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Panel Widget, with added support from inputEx.Base"}], "namespace": "", "module": "panel", "guessedname": "Panel", "uses": ["inputEx.Base"], "superclass": "Panel", "file": "inputex-panel.js", "guessedtype": "property", "extends": "Panel", "shortname": "inputEx.Panel", "description": "A basic Panel Widget, with added support from inputEx.Base"}, "inputEx.AutoComplete": {"name": "inputEx.AutoComplete", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for Autocompleter\n<ul>\n<li>source: the datasource</li>\n<li>autoComp: autocompleter options</li>\n<li>returnValue: function to format the returned value (optional)</li>\n</ul>"}], "description": "An autocomplete field that wraps the YUI autocompleter"}], "namespace": "", "module": "inputex-autocomplete", "guessedname": "AutoComplete", "methods": {"itemSelectHandler": {"params": [{"type": "", "name": "sType", "description": ""}, {"type": "", "name": "aArgs", "description": ""}], "description": "itemSelect handler", "guessedname": "itemSelectHandler", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " Value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updated event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Custom event init\n<ul>\n<li>listen to autocompleter textboxBlurEvent instead of this.el \"blur\" event</li>\n<li>listener to autocompleter textboxBlurEvent added in buildAutocomplete method</li>\n</ul>", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the hidden list element", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"description": "Return the hidden value (stored in a hidden input)", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds autocomplete options", "guessedname": "setOptions", "guessedtype": "function"}, "buildAutocomplete": {"description": "Build the YUI autocompleter", "guessedname": "buildAutocomplete", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-autocomplete.js", "guessedtype": "function", "shortname": "inputEx.AutoComplete", "description": "An autocomplete field that wraps the YUI autocompleter"}, "inputEx.DateSplitField": {"name": "inputEx.DateSplitField", "namespace": "", "module": "inputex-datesplit", "guessedname": "DateSplitField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Set the value. Format the date according to options.dateFormat", "guessedname": "setValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-datesplit.js", "guessedtype": "function", "shortname": "inputEx.DateSplitField", "description": "inputEx.DateSplitField"}, "inputEx.TextAutoTag": {"name": "inputEx.TextAutoTag", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>rows: rows attribute</li>\n<li>cols: cols attribute</li>\n</ul>"}], "description": "Create a textarea input"}], "namespace": "", "module": "inputex-textautotag", "guessedname": "TextAutoTag", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the specific options (autotagservice)", "guessedname": "setOptions", "guessedtype": "function"}, "getTags": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the specific options (autotagservice)", "guessedname": "getTags", "guessedtype": "function"}, "doWeRequest": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "string", "name": "updated", "description": " text"}], "description": "Decide wether or not we request", "guessedname": "doWeRequest", "guessedtype": "function"}, "handleResponse": {"description": "handleUpdate", "guessedname": "handleResponse", "guessedtype": "function"}, "handleUpdate": {"description": "handleUpadte", "guessedname": "handleUpdate", "guessedtype": "function"}}, "extends": "inputEx.Textarea", "superclass": "inputEx.Textarea", "file": "inputex-textautotag.js", "guessedtype": "function", "shortname": "inputEx.TextAutoTag", "description": "Create a textarea input"}, "inputEx.RPC.SMDTester": {"name": "inputEx.RPC.SMDTester", "namespace": "", "module": "inputex-smdtester", "guessedname": "SMDTester", "methods": {"onServiceLoaded": {"description": "When the SMD has been loaded", "guessedname": "onServiceLoaded", "guessedtype": "function"}, "loadSMD": {"description": "When the user select a SMD in the select", "guessedname": "loadSMD", "guessedtype": "function"}, "onServiceMethod": {"description": "When a method has been selected :", "guessedname": "onServiceMethod", "guessedtype": "function"}}, "file": "inputex-smdtester.js", "guessedtype": "function", "shortname": "inputEx.RPC.SMDTester", "description": "Creates a form to test various SMD files"}, "inputEx.DateField": {"name": "inputEx.DateField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Add the folowing options: \n<ul>\n<li>dateFormat: Editor format (the one which is presented to the user) default to 'm/d/Y'</li>\n<li>valueFormat: if falsy, the field will return a javascript Date instance. Otherwise, this format will be used for input parsing/output formatting</li>\n</ul>"}], "description": "A Date Field."}], "namespace": "", "module": "inputex-date", "guessedname": "DateField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Format the date according to options.dateFormat", "guessedname": "setValue", "guessedtype": "function"}, "parseWithFormat": {"description": "Those methods are limited but largely enough for our usage", "guessedname": "parseWithFormat", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds the 'inputEx-DateField' default className", "guessedname": "setOptions", "guessedtype": "function"}, "formatDate": {"description": "Those methods are limited but largely enough for our usage", "guessedname": "formatDate", "guessedtype": "function"}, "validate": {"description": "Specific Date validation depending of the 'format' option", "guessedname": "validate", "guessedtype": "function"}, "getValue": {"return": {"type": "String || Date", "description": "Formatted date using the valueFormat or a javascript Date instance"}, "params": [{"type": "Boolean", "name": "forceDate", "description": " Skip the valueFormat option if set to truthy"}], "description": "Return the date", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "inputex-date.js", "guessedtype": "function", "shortname": "inputEx.DateField", "description": "A Date Field."}, "inputEx.Form": {"name": "inputEx.Form", "constructors": [{"params": [{"type": "Object} options The following options are added for Forms:\n<ul>\n<li>buttons: list of button definition objects {value: 'Click Me', type: 'submit'}</li>\n<li>ajax: send the form through an ajax request (submit button should be present): {method: 'POST', uri: 'myScript.php', callback: same as YAHOO.util.Connect.asyncRequest callback", "name": "</li>", "description": "\n<li>showMask: adds a mask over the form while the request is running (default is false)</li>\n</ul>"}], "description": "Create a group of fields within a FORM tag and adds buttons"}], "namespace": "", "module": "inputex-form", "guessedname": "Form", "methods": {"hideMask": {"description": "Hide the form mask", "guessedname": "hideMask", "guessedtype": "function"}, "renderMask": {"description": "Create a Mask over the form", "guessedname": "renderMask", "guessedtype": "function"}, "onSubmit": {"params": [{"type": "Event", "name": "e", "description": " The original onSubmit event"}], "description": "Intercept the 'onsubmit' event and stop it if !validate\nIf the ajax option object is set, use YUI async Request to send the form", "guessedname": "onSubmit", "guessedtype": "function"}, "render": {"description": "Render the group", "guessedname": "render", "guessedtype": "function"}, "initEvents": {"description": "Init the events", "guessedname": "initEvents", "guessedtype": "function"}, "enable": {"description": "Enable all fields and buttons in the form", "guessedname": "enable", "guessedtype": "function"}, "disable": {"description": "Disable all fields and buttons in the form", "guessedname": "disable", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Adds buttons and set ajax default parameters", "guessedname": "setOptions", "guessedtype": "function"}, "asyncRequest": {"description": "Send the form value in JSON through an ajax request", "guessedname": "asyncRequest", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "renderButtons": {"description": "Render the buttons", "guessedname": "renderButtons", "guessedtype": "function"}, "showMask": {"description": "Show the form mask", "guessedname": "showMask", "guessedtype": "function"}}, "extends": "inputEx.Group", "superclass": "inputEx.Group", "file": "inputex-form.js", "guessedtype": "function", "shortname": "inputEx.Form", "description": "Create a group of fields within a FORM tag and adds buttons"}, "inputEx.widget.Button": {"name": "inputEx.widget.Button", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " The following options are available for Button :\n<ul>\n<li><b>id</b>: id of the created A element (default is auto-generated)</li>\n<li><b>className</b>: CSS class added to the button (default is either \"inputEx-Button-Link\" or \"inputEx-Button-Submit-Link\", depending on \"type\")</li>\n<li><b>parentEl</b>: The DOM element where we should append the button</li>\n<li><b>type</b>: \"link\", \"submit-link\" or \"submit\"</li>\n<li><b>value</b>: text displayed inside the button</li>\n<li><b>disabled</b>: Disable the button after creation</li>\n<li><b>onClick</b>: Custom click event handler</li>\n</ul>"}], "description": "Create a button"}], "namespace": "", "module": "inputex-button", "guessedname": "Button", "methods": {"enable": {"description": "Enable the button", "guessedname": "enable", "guessedtype": "function"}, "render": {"return": {"type": "DOMElement", "description": "The created button"}, "params": [{"type": "DOMElement", "name": "parentEl", "description": " The DOM element where the button should be rendered"}], "description": "render the button into the parent Element", "guessedname": "render", "guessedtype": "function"}, "initEvents": {"description": "attach the listeners on \"click\" event and create the custom events", "guessedname": "initEvents", "guessedtype": "function"}, "setOptions": {"description": "set the default options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the button", "guessedname": "disable", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}}, "file": "inputex-button.js", "guessedtype": "function", "shortname": "inputEx.widget.Button", "events": {"click": {"description": "Click Event facade (YUI3 published event)"}, "submit": {"description": "Submit Event facade (YUI3 published event)"}}, "description": "Create a button"}, "inputEx.StringField": {"name": "inputEx.StringField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>regexp: regular expression used to validate (otherwise it always validate)</li>\n<li>size: size attribute of the input</li>\n<li>maxLength: maximum size of the string field (no message display, uses the maxlength html attribute)</li>\n<li>minLength: minimum size of the string field (will display an error message if shorter)</li>\n<li>typeInvite: string displayed when the field is empty</li>\n<li>readonly: set the field as readonly</li>\n</ul>"}], "description": "Basic string field (equivalent to the input type \"text\")"}], "namespace": "", "module": "inputex-string", "guessedname": "StringField", "methods": {"onFocus": {"description": "Clear the typeInvite when the field gains focus", "guessedname": "onFocus", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Register the change, focus and blur events", "guessedname": "initEvents", "guessedtype": "function"}, "getStateString": {"description": "Add the minLength string message handling", "guessedname": "getStateString", "guessedtype": "function"}, "renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}, "focus": {"description": "Set the focus to this field", "guessedname": "focus", "guessedtype": "function"}, "setClassFromState": {"description": "Display the type invite after setting the class", "guessedname": "setClassFromState", "guessedtype": "function"}, "getValue": {"params": [{"type": "String", "name": "The", "description": " string value"}], "description": "Return the string value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "setFieldName": {"description": "Set the name of the field (or hidden field)", "guessedname": "setFieldName", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "validate": {"description": "Uses the optional regexp to validate the field value", "guessedname": "validate", "guessedtype": "function"}, "isDisabled": {"description": "Check if the field is disabled", "guessedname": "isDisabled", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-string.js", "guessedtype": "function", "shortname": "inputEx.StringField", "description": "Basic string field (equivalent to the input type \"text\")"}, "inputEx": {"return": "{inputEx.Field} Created field instance", "name": "inputEx", "namespace": "", "module": "inputex", "guessedname": "inputEx", "methods": {"use": {"description": "Load the modules from an inputEx definition", "guessedname": "use", "guessedtype": "function"}, "cn": {"return": {"type": "HTMLElement", "description": "The created node"}, "description": "Helper function to create a DOM node. (wrapps the document.createElement tag and the inputEx.sn functions)", "static": "", "guessedname": "cn", "guessedtype": "function", "params": [{"type": "String", "name": "tag", "description": " The tagName to create (ex: 'div', 'a', ...)"}, {"type": "Object", "name": "[domAttributes]", "description": " see inputEx.sn"}, {"type": "Object", "name": "[styleAttributes]", "description": " see inputEx.sn"}, {"type": "String", "name": "[innerHTML]", "description": " The html string to append into the created element"}]}, "registerType": {"static": "", "params": [{"type": "String", "name": "type", "description": " String used as the inputEx field type"}, {"type": "Class", "name": "fieldClass", "description": " Field Class to register as this type"}, {"type": "Array", "name": "groupOptions", "description": " List of inputEx field description for each option"}, {"type": "Boolean", "name": "dontInherit", "description": " Won't inherhit the parent field properties if set to true"}], "description": "When you create a new inputEx Field Class, you can register it to give it a simple type.\nex:   inputEx.registerType(\"color\", inputEx.ColorField);", "guessedname": "registerType", "guessedtype": "function"}, "getModulesFromDefinition": {"description": "Return unique modules definitions", "guessedname": "getModulesFromDefinition", "guessedtype": "function"}, "getType": {"return": {"type": "String", "description": "returns the inputEx type string or <code>null</code>"}, "description": "Get the inputex type for the given class (ex: <code>inputEx.getType(inputEx.ColorField)</code> returns \"color\")", "static": "", "guessedname": "getType", "guessedtype": "function", "params": [{"type": "inputEx.Field", "name": "FieldClass", "description": " An inputEx.Field or derivated class"}]}, "compactArray": {"return": {"type": "Array", "description": "The new array"}, "description": "Create a new array without the null or undefined values", "static": "", "guessedname": "compactArray", "guessedtype": "function", "params": [{"type": "Array", "name": "arr", "description": " The array to compact"}]}, "indexOf": {"return": {"type": "number", "description": "Element position, -1 if not found"}, "description": "Find the position of the given element. (This method is not available in IE 6)", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "el", "description": " Value to search"}, {"type": "Array", "name": "arr", "description": " The array to search"}, {"type": "Function", "name": "(optional)", "description": " fn A function to define another way to test inclusion of el than === (returns a boolean)"}]}, "htmlEntities": {"return": {"type": "String", "description": "String replaced by some html entities"}, "description": "String replaced by some html entities", "static": "", "guessedname": "htmlEntities", "guessedtype": "function", "params": [{"type": "String", "name": "str", "description": " The string"}]}, "getFieldClass": {"static": "", "params": [{"type": "String", "name": "type", "description": " String type of the field"}], "description": "Returns the class for the given type\nex: inputEx.getFieldClass(\"color\") returns inputEx.ColorField", "guessedname": "getFieldClass", "guessedtype": "function"}, "removeAccents": {"return": {"type": "String", "description": "String without accent"}, "description": "Return a string without accent (only on lowercase)", "static": "", "guessedname": "removeAccents", "guessedtype": "function", "params": [{"type": "String", "name": "str", "description": " The string"}]}, "getRawModulesFromDefinition": {"description": "Return recursively the inputex modules from their 'type' property using (modulesByType from loader.js)", "guessedname": "getRawModulesFromDefinition", "guessedtype": "function"}, "sn": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to set attributes to"}, {"type": "Object} domAttributes An object containing key/value pairs to set as node attributes (ex: {id: 'myElement', className: 'myCssClass', ...", "name": ")", "description": ""}, {"type": "Object", "name": "styleAttributes", "description": " Same thing for style attributes. Please use camelCase for style attributes (ex: backgroundColor for 'background-color')"}], "description": "Helper function to set DOM node attributes and style attributes.", "guessedname": "sn", "guessedtype": "function"}}, "static": "", "param": "{Object} fieldOptions", "file": "inputex.js", "guessedtype": "function", "shortname": "inputEx", "properties": {"stateEmpty": {"type": "String", "description": "Field empty state constant", "guessedname": "stateEmpty", "guessedtype": "property"}, "stateValid": {"type": "String", "description": "Field valid state constant", "guessedname": "stateValid", "guessedtype": "property"}, "widget": {"static": "", "description": "inputEx widget namespace", "guessedname": "widget", "guessedtype": "property"}, "typeClasses": {"description": "Hash between inputEx types and classes (ex: <code>inputEx.typeClasses.color = inputEx.ColorField</code>)<br />\nPlease register the types with the <code>registerType</code> method", "guessedname": "typeClasses", "guessedtype": "property"}, "regexps": {"description": "Associative array containing common regular expressions", "guessedname": "regexps", "guessedtype": "property"}, "browserAutocomplete": {"description": "Property to globally turn on/off the browser autocompletion\n(used as default autocomplete option value by StringField, Form and their subclasses)", "guessedname": "browserAutocomplete", "guessedtype": "property"}, "messages": {"description": "Associative array containing field messages => using intl module from YUI", "guessedname": "messages", "guessedtype": "property"}, "stateRequired": {"type": "String", "description": "Field required state constant", "guessedname": "stateRequired", "guessedtype": "property"}, "mixin": {"static": "", "description": "inputEx mixin namespace", "guessedname": "mixin", "guessedtype": "property"}, "stateInvalid": {"type": "String", "description": "Field invalid state constant", "guessedname": "stateInvalid", "guessedtype": "property"}, "spacerUrl": {"type": "String", "description": "Url to the spacer image. This url schould be changed according to your project directories", "guessedname": "spacerUrl", "guessedtype": "property"}}, "description": "The inputEx method lets you create a field from the JSON definition:\n<pre>\ninputEx({type: 'string', name: 'company', label: 'Your company' })\n</pre>\nBuild a field from an object like: { type: 'color' or fieldClass: inputEx.ColorField, ... }<br />\nIf the neither type or fieldClass are found, it uses inputEx.StringField"}, "inputEx.RatingStars": {"name": "inputEx.RatingStars", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " The following options are added for RatingStars :\n<ul>\n<li><b>averageValue</b>: average value before clicking, must be a float number</li>\n<li><b>nRates</b>: numbers of vote</li>\n<li><b>disableRate</b>: Disable the rate but show stars</li>\n<li><b>nStars</b>: <i>integer</i> number of stars (default : 5) </li>\n<li><b>disabled</b>: disable voting  </li>\n<li><b>message</b>: <i>string</i> C-like with % convention string for display Message (default 'Rating: % (% votes cast)') </li>\n<li><b>disableMessage</b>: <i>string</i> String to show when mouse pass hover the stars and stars are disabled</li>\n</ul>"}], "description": "Create a star rating Field\nThis field has been made by integrating script from http://www.unessa.net/en/hoyci/projects/yui-star-rating/\nTo use it with auto data sending, use RatingStars"}], "namespace": "", "module": "inputex-ratingstars", "guessedname": "RatingStars", "methods": {"render": {"description": "render stars", "guessedname": "renderComponent", "guessedtype": "function"}, "initEvents": {"description": "InitEvents", "guessedname": "initEvents", "guessedtype": "function"}, "resetStars": {"description": "reset Stars and note", "guessedname": "resetStars", "guessedtype": "function"}, "onHoverStar": {"description": "When mouse is over a star", "guessedname": "onHoverStar", "guessedtype": "function"}, "onClickRating": {"guessedname": "onClickRating", "guessedtype": "function"}, "onAsync": {"description": "onAsync is called by the containing form when request is Send", "guessedname": "onAsync", "guessedtype": "function"}, "setMessage": {"description": "Set message options of the selectField", "guessedname": "setMessage", "guessedtype": "function"}, "showMessage": {"description": "Tell something under the stars", "guessedname": "showMessage", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-ratingstars.js", "guessedtype": "function", "shortname": "inputEx.RatingStars", "description": "Create a star rating Field\nThis field has been made by integrating script from http://www.unessa.net/en/hoyci/projects/yui-star-rating/\nTo use it with auto data sending, use RatingStars"}, "inputEx.RPC": {"name": "inputEx.RPC", "namespace": "", "module": "inputex-rpc", "guessedname": "RPC", "methods": {"formForMethod": {"params": [{"type": "function", "name": "method", "description": " A method created through inputEx.RPC.Service"}], "description": "Return the inputEx form options from a method", "guessedname": "formForMethod", "guessedtype": "function"}, "generateServiceForm": {"params": [{"type": "function", "name": "method", "description": " A method created through inputEx.RPC.Service"}, {"type": "Object", "name": "formOpts", "description": ""}], "description": "Build a form to run a service !", "guessedname": "generateServiceForm", "guessedtype": "function"}}, "static": "", "file": "inputex-rpc.js", "guessedtype": "property", "shortname": "inputEx.RPC", "description": "inputEx RPC utility functions\nImplements SMD and create forms directly from services"}, "inputEx.DSSelectField": {"name": "inputEx.DSSelectField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>options: list of option elements configurations</li>\n<li>datasource: the datasource</li>\n<li>valueKey: value key</li>\n<li>labelKey: label key</li>\n</ul>"}], "description": "Create a select field from a datasource"}], "namespace": "", "module": "inputex-dsselect", "guessedname": "DSSelectField", "methods": {"populateSelect": {"description": "Insert the options", "guessedname": "populateSelect", "guessedtype": "function"}, "renderComponent": {"description": "Build a select tag with options", "guessedname": "renderComponent", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Setup the additional options for selectfield", "guessedname": "setOptions", "guessedtype": "function"}, "onDatasourceSuccess": {"description": "Callback for request success", "guessedname": "onDatasourceSuccess", "guessedtype": "function"}, "onDatasourceFailure": {"description": "Callback for request failure", "guessedname": "onDatasourceFailure", "guessedtype": "function"}, "sendDataRequest": {"description": "Send the datasource request", "guessedname": "sendDataRequest", "guessedtype": "function"}}, "extends": "inputEx.SelectField", "superclass": "inputEx.SelectField", "file": "inputex-dsselect.js", "guessedtype": "function", "shortname": "inputEx.DSSelectField", "description": "Create a select field from a datasource"}, "inputEx.Textarea": {"name": "inputEx.Textarea", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>rows: rows attribute</li>\n<li>cols: cols attribute</li>\n</ul>"}], "description": "Create a textarea input"}], "namespace": "", "module": "inputex-textarea", "guessedname": "Textarea", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object as passed to the constructor"}], "description": "Set the specific options (rows and cols)", "guessedname": "setOptions", "guessedtype": "function"}, "getStateString": {"description": "Add the minLength string message handling", "guessedname": "getStateString", "guessedtype": "function"}, "renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}, "validate": {"description": "Uses the optional regexp to validate the field value", "guessedname": "validate", "guessedtype": "function"}, "insert": {"params": [{"type": "String", "name": "text", "description": " Text to insert"}], "description": "Insert text at the current cursor position", "guessedname": "insert", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-textarea.js", "guessedtype": "function", "shortname": "inputEx.Textarea", "description": "Create a textarea input"}, "inputEx.DateSelectMonthField": {"name": "inputEx.DateSelectMonthField", "namespace": "", "module": "inputex-dateselectmonth", "guessedname": "DateSelectMonthField", "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "inputex-dateselectmonth.js", "guessedtype": "function", "shortname": "inputEx.DateSelectMonthField", "description": "A field to enter a date with 2 strings and a select"}, "inputEx.SerializeField.serializers": {"name": "inputEx.SerializeField.serializers", "namespace": "", "module": "inputex-serialize", "guessedname": "serializers", "methods": {"serialize": {"static": "", "description": "serialize to JSON", "guessedname": "serialize", "guessedtype": "function"}, "deserialize": {"static": "", "description": "deserialize from JSON", "guessedname": "deserialize", "guessedtype": "function"}}, "static": "", "file": "inputex-serialize.js", "guessedtype": "property", "shortname": "inputEx.SerializeField.serializers", "properties": {"xml": {"static": "", "description": "XML Serializer (uses the ObjTree library)", "guessedname": "xml", "guessedtype": "property"}, "json": {"static": "", "description": "JSON Serializer", "guessedname": "json", "guessedtype": "property"}}, "description": "Default serializers for the SerializeField"}, "inputEx.HiddenField": {"name": "inputEx.HiddenField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a hidden input, inherits from inputEx.Field"}], "namespace": "", "module": "inputex-hidden", "guessedname": "HiddenField", "methods": {"setValue": {"params": [{"type": "Any", "name": "val", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the 'updated' event or not (default is true, pass false to NOT send the event)"}], "description": "Stores the typed value in a local variable, and store the value in the hidden input (cast as string by the input)", "guessedname": "setValue", "guessedtype": "function"}, "render": {"description": "Doesn't render much...", "guessedname": "render", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the previously stored value"}, "description": "Get the previously stored value (respect the datatype of the value)", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "inputex-hidden.js", "guessedtype": "function", "shortname": "inputEx.HiddenField", "description": "Create a hidden input, inherits from inputEx.Field"}, "inputEx.RatingStarsForm": {"name": "inputEx.RatingStarsForm", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " The following options are added for RatingStarsForm :\n<ul>\n<li><b>ratingStarsOptions</b>: see inputEx.RatingStars</li>\n</ul>\n<p>The classical Form options may have no sens here</p>"}], "description": "Create a custom Form that use RatingStars and send it automatically"}], "namespace": "", "module": "inputex-ratingstarsform", "guessedname": "RatingStarsForm", "methods": {"setOptions": {"description": "Set Options change default className and set fields options", "guessedname": "setOptions", "guessedtype": "function"}, "setFields": {"description": "Set fields option of the form", "guessedname": "setFields", "guessedtype": "function"}, "renderStatusEl": {"description": "subscribe rateEvt on each Field", "guessedname": "renderField", "guessedtype": "function"}}, "extends": "inputEx.Form", "superclass": "inputEx.Form", "file": "inputex-ratingstarsform.js", "guessedtype": "function", "shortname": "inputEx.RatingStarsForm", "description": "Create a custom Form that use RatingStars and send it automatically"}}, "version": "3.0.0a", "modules": {"inputex-tree": {"classlist": ["inputEx.TreeField"], "subdata": {}, "name": "inputex-tree", "filelist": ["inputex-type.js"], "submodules": []}, "inputex-inplaceedit": {"classlist": ["inputEx.InPlaceEdit"], "subdata": {}, "name": "inputex-inplaceedit", "filelist": ["inputex-integer.js"], "submodules": []}, "inputex-datetime": {"classlist": ["inputEx.DateTimeField"], "subdata": {}, "name": "inputex-datetime", "filelist": ["inputex-dsselect.js"], "submodules": []}, "inputex-autocomplete": {"classlist": ["inputEx.AutoComplete"], "subdata": {}, "name": "inputex-autocomplete", "filelist": ["inputex-base.js"], "submodules": []}, "inputex-ratingstars": {"classlist": ["inputEx.RatingStars"], "subdata": {}, "name": "inputex-ratingstars", "filelist": ["inputex-ratingstarsform.js"], "submodules": []}, "inputex-hidden": {"classlist": ["inputEx.HiddenField"], "subdata": {}, "name": "inputex-hidden", "filelist": ["inputex-inplaceedit.js"], "submodules": []}, "inputex-datesplit": {"classlist": ["inputEx.DateSplitField"], "subdata": {}, "name": "inputex-datesplit", "filelist": ["inputex-datetime.js"], "submodules": []}, "inputex-jsonschema": {"classlist": ["inputEx.JsonSchema", "inputEx.JsonSchema.Builder"], "subdata": {}, "name": "inputex-jsonschema", "filelist": ["inputex-jsontreeinspector.js"], "submodules": []}, "inputex-ratingstarsform": {"classlist": ["inputEx.RatingStarsForm"], "subdata": {}, "name": "inputex-ratingstarsform", "filelist": ["inputex-rpc.js"], "submodules": []}, "inputex-rte": {"classlist": ["inputEx.RTEField"], "subdata": {}, "name": "inputex-rte", "filelist": ["inputex-select.js"], "submodules": []}, "inputex-uppercase": {"classlist": ["inputEx.UpperCaseField"], "subdata": {}, "name": "inputex-uppercase", "filelist": ["inputex-url.js"], "submodules": []}, "inputex-uneditable": {"classlist": ["inputEx.UneditableField"], "subdata": {}, "name": "inputex-uneditable", "filelist": ["inputex-uppercase.js"], "submodules": []}, "inputex-map": {"classlist": ["inputEx.MapField"], "subdata": {}, "name": "inputex-map", "filelist": ["inputex-menu.js"], "submodules": []}, "inputex-base": {"description": "A widget-stdmod-level extension that provides ability to render a form within the body", "submodules": [], "classlist": ["inputExBase"], "filelist": ["inputex-button.js"], "subdata": {}, "name": "inputex-base"}, "inputex-list": {"classlist": ["inputEx.ListField"], "subdata": {}, "name": "inputex-list", "filelist": ["inputex-listcustom.js"], "submodules": []}, "inputex-email": {"classlist": ["inputEx.EmailField"], "subdata": {}, "name": "inputex-email", "filelist": ["inputex-field.js"], "submodules": []}, "inputex-dsselect": {"classlist": ["inputEx.DSSelectField"], "subdata": {}, "name": "inputex-dsselect", "filelist": ["inputex-dtinplaceedit.js"], "submodules": []}, "inputex-visus": {"description": "Used by InPlaceEdit and Uneditable fields", "submodules": [], "classlist": ["inputEx.visus"], "filelist": [], "subdata": {}, "name": "inputex-visus"}, "inputex-textarea": {"classlist": ["inputEx.Textarea"], "subdata": {}, "name": "inputex-textarea", "filelist": ["inputex-textautotag.js"], "submodules": []}, "inputex-multiautocompletecustom": {"classlist": ["inputEx.MultiAutoCompleteCustom"], "subdata": {}, "name": "inputex-multiautocompletecustom", "filelist": ["inputex-multiselect.js"], "submodules": []}, "inputex-keyvalue": {"classlist": ["inputEx.KeyValueField"], "subdata": {}, "name": "inputex-keyvalue", "filelist": ["inputex-lens.js"], "submodules": []}, "inputex-time": {"classlist": ["inputEx.TimeField"], "subdata": {}, "name": "inputex-time", "filelist": ["inputex-timeinterval.js"], "submodules": []}, "inputex-dateselectmonth": {"classlist": ["inputEx.DateSelectMonthField"], "subdata": {}, "name": "inputex-dateselectmonth", "filelist": ["inputex-datesplit.js"], "submodules": []}, "inputex-combine": {"classlist": ["inputEx.CombineField"], "subdata": {}, "name": "inputex-combine", "filelist": ["inputex-datatable.js"], "submodules": []}, "inputex-colorpickerfield": {"classlist": ["inputEx.ColorPickerField"], "subdata": {}, "name": "inputex-colorpickerfield", "filelist": ["inputex-combine.js"], "submodules": []}, "inputex-date": {"classlist": ["inputEx.DateField"], "subdata": {}, "name": "inputex-date", "filelist": ["inputex-datepicker.js"], "submodules": []}, "inputex-multiselect": {"classlist": ["inputEx.MultiSelectField"], "subdata": {}, "name": "inputex-multiselect", "filelist": ["inputex-multiselectcustom.js"], "submodules": []}, "inputex-datepicker": {"classlist": ["inputEx.DatePickerField"], "subdata": {}, "name": "inputex-datepicker", "filelist": ["inputex-dateselectmonth.js"], "submodules": []}, "inputex-password": {"classlist": ["inputEx.PasswordField"], "subdata": {}, "name": "inputex-password", "filelist": ["inputex-radio.js"], "submodules": []}, "inputex-number": {"classlist": ["inputEx.NumberField"], "subdata": {}, "name": "inputex-number", "filelist": ["inputex-object.js"], "submodules": []}, "inputex-vector": {"classlist": ["inputEx.VectorField"], "subdata": {}, "name": "inputex-vector", "filelist": ["inputex-visus.js"], "submodules": []}, "inputex-button": {"classlist": ["inputEx.widget.Button"], "subdata": {}, "name": "inputex-button", "filelist": ["inputex-checkbox.js"], "submodules": []}, "inputex-datatable": {"classlist": [], "subdata": {}, "name": "inputex-datatable", "filelist": ["inputex-date.js"], "submodules": []}, "inputex-menu": {"classlist": ["inputEx.MenuField"], "subdata": {}, "name": "inputex-menu", "filelist": ["inputex-multiautocomplete.js"], "submodules": []}, "inputex-dtinplaceedit": {"classlist": ["inputEx.widget.dtInPlaceEdit", "inputEx.widget.CellEditor"], "subdata": {}, "name": "inputex-dtinplaceedit", "filelist": ["inputex-email.js"], "submodules": []}, "inputex-radio": {"classlist": ["inputEx.RadioField"], "subdata": {}, "name": "inputex-radio", "filelist": ["inputex-ratingstars.js"], "submodules": []}, "inputex-smdtester": {"classlist": ["inputEx.RPC.SMDTester"], "subdata": {}, "name": "inputex-smdtester", "filelist": ["inputex-string.js"], "submodules": []}, "inputex-file": {"classlist": ["inputEx.FileField"], "subdata": {}, "name": "inputex-file", "filelist": ["inputex-form.js"], "submodules": []}, "inputex-timerange": {"description": "Tweaking the TimeField to make a Time Range (two TimeFields)\n- doesn't show seconds\n- Minutes by group of 5", "submodules": [], "classlist": [], "filelist": ["inputex-tinymce.js"], "subdata": {}, "guessedname": "TimeRange", "guessedtype": "function", "name": "inputex-timerange"}, "inputex": {"description": "The inputEx Library", "submodules": [], "classlist": ["inputEx"], "filelist": ["loader.js", "inputex.js", "inputex_ca.js", "inputex_de.js", "inputex_en.js", "inputex_es.js", "inputex_fr.js", "inputex_it.js", "inputex_nl.js", "inputex-autocomplete.js"], "subdata": {}, "name": "inputex"}, "inputex-pie-listcustom": {"classlist": [], "subdata": {}, "name": "inputex-pie-listcustom", "filelist": ["inputex-map.js"], "submodules": []}, "inputex-multiautocomplete": {"classlist": ["inputEx.MultiAutoComplete"], "subdata": {}, "name": "inputex-multiautocomplete", "filelist": ["inputex-multiautocompletecustom.js"], "submodules": []}, "inputex-field": {"description": "Provides the base \"field\" abstract class", "submodules": [], "classlist": ["inputEx.Field"], "filelist": ["inputex-file.js"], "subdata": {}, "name": "inputex-field"}, "inputex-timeinterval": {"classlist": ["inputEx.TimeIntervalField"], "subdata": {}, "name": "inputex-timeinterval", "filelist": ["inputex-timerange.js"], "submodules": []}, "inputex-type": {"classlist": ["inputEx.TypeField"], "subdata": {}, "name": "inputex-type", "filelist": ["inputex-uneditable.js"], "submodules": []}, "inputex-select": {"classlist": ["inputEx.SelectField"], "subdata": {}, "name": "inputex-select", "filelist": ["inputex-selecttwice.js"], "submodules": []}, "inputex-selecttwice": {"classlist": ["inputEx.SelectTwiceField"], "subdata": {}, "name": "inputex-selecttwice", "filelist": ["inputex-serialize.js"], "submodules": []}, "panel": {"description": "Provides a Panel widget, a widget that mimics the functionality of a regular OS window.\nComes with Standard Module support, XY Positioning, Alignment Support, Stack (z-index) support,\nmodality, auto-focus and auto-hide functionality, and header/footer button support.", "submodules": [], "classlist": ["inputEx.Panel"], "filelist": ["inputex-password.js"], "subdata": {}, "name": "panel"}, "inputex-tinymce": {"classlist": ["inputEx.TinyMCEField"], "subdata": {}, "name": "inputex-tinymce", "filelist": ["inputex-tree.js"], "submodules": []}, "inputex-ipv4": {"classlist": ["inputEx.IPv4Field"], "subdata": {}, "name": "inputex-ipv4", "filelist": ["inputex-jsonschema.js"], "submodules": []}, "inputex-textautotag": {"classlist": ["inputEx.TextAutoTag"], "subdata": {}, "name": "inputex-textautotag", "filelist": ["inputex-time.js"], "submodules": []}, "inputex-url": {"classlist": ["inputEx.UrlField"], "subdata": {}, "name": "inputex-url", "filelist": ["inputex-vector.js"], "submodules": []}, "inputex-keyopvalue": {"classlist": ["inputEx.KeyOpValueField"], "subdata": {}, "name": "inputex-keyopvalue", "filelist": ["inputex-keyvalue.js"], "submodules": []}, "inputex-slider": {"classlist": ["inputEx.SliderField"], "subdata": {}, "name": "inputex-slider", "filelist": ["inputex-smdtester.js"], "submodules": []}, "inputex-choice": {"classlist": ["inputEx.mixin.choice"], "subdata": {}, "name": "inputex-choice", "filelist": ["inputex-color.js"], "submodules": []}, "inputex-serialize": {"classlist": ["inputEx.SerializeField", "inputEx.SerializeField.serializers"], "subdata": {}, "name": "inputex-serialize", "filelist": ["inputex-slider.js"], "submodules": []}, "inputex-multiselectcustom": {"classlist": ["inputEx.MultiSelectCustomField"], "subdata": {}, "name": "inputex-multiselectcustom", "filelist": ["inputex-number.js"], "submodules": []}, "inputex-group": {"classlist": ["inputEx.Group"], "subdata": {}, "name": "inputex-group", "filelist": ["inputex-hidden.js"], "submodules": []}, "inputex-jsontreeinspector": {"classlist": ["inputEx.widget.JsonTreeInspector"], "subdata": {}, "name": "inputex-jsontreeinspector", "filelist": ["inputex-keyopvalue.js"], "submodules": []}, "inputex-color": {"classlist": ["inputEx.ColorField"], "subdata": {}, "name": "inputex-color", "filelist": ["inputex-colorpicker.js"], "submodules": []}, "inputex-lens": {"classlist": ["inputEx.Lens"], "subdata": {}, "name": "inputex-lens", "filelist": ["inputex-list.js"], "submodules": []}, "inputex-rpc": {"classlist": ["inputEx.RPC", "inputEx.RPC.Service", "inputEx.RPC.Transport", "inputEx.RPC.Envelope", "inputEx.RPC.Envelope.URL", "inputEx.RPC.Envelope.PATH", "inputEx.RPC.Envelope.JSON", "inputEx.RPC.Envelope.JSON-RPC-1.0", "inputEx.RPC.Envelope.JSON-RPC-2.0"], "subdata": {}, "name": "inputex-rpc", "filelist": ["inputex-rte.js"], "submodules": []}, "inputex-checkbox": {"classlist": ["inputEx.CheckBox"], "subdata": {}, "name": "inputex-checkbox", "filelist": ["inputex-choice.js"], "submodules": []}, "inputex-stringavailability": {"classlist": ["inputEx.StringAvailability"], "subdata": {}, "name": "inputex-stringavailability", "filelist": ["inputex-textarea.js"], "submodules": []}, "inputex-string": {"classlist": ["inputEx.StringField"], "subdata": {}, "name": "inputex-string", "filelist": ["inputex-stringavailability.js"], "submodules": []}, "inputex-form": {"classlist": ["inputEx.Form"], "subdata": {}, "name": "inputex-form", "filelist": ["inputex-group.js"], "submodules": []}, "inputex-object": {"classlist": ["inputEx.ObjectField"], "subdata": {}, "name": "inputex-object", "filelist": ["inputex-panel.js"], "submodules": []}, "inputex-integer": {"classlist": ["inputEx.IntegerField"], "subdata": {}, "name": "inputex-integer", "filelist": ["inputex-ipv4.js"], "submodules": []}}, "filemap": {"inputex-group.js": {"classlist": ["inputEx.Group"], "name": "inputex-group.js", "module": "inputex-form"}, "inputex-string.js": {"classlist": ["inputEx.StringField"], "name": "inputex-string.js", "module": "inputex-smdtester"}, "inputex_fr.js": {"classlist": [], "name": "inputex_fr.js", "module": "inputex"}, "inputex-rpc.js": {"classlist": ["inputEx.RPC", "inputEx.RPC.Service", "inputEx.RPC.Transport", "inputEx.RPC.Envelope", "inputEx.RPC.Envelope.URL", "inputEx.RPC.Envelope.PATH", "inputEx.RPC.Envelope.JSON", "inputEx.RPC.Envelope.JSON-RPC-1.0", "inputEx.RPC.Envelope.JSON-RPC-2.0"], "name": "inputex-rpc.js", "module": "inputex-ratingstarsform"}, "inputex-keyopvalue.js": {"classlist": ["inputEx.KeyOpValueField"], "name": "inputex-keyopvalue.js", "module": "inputex-jsontreeinspector"}, "inputex_es.js": {"classlist": [], "name": "inputex_es.js", "module": "inputex"}, "inputex-timeinterval.js": {"classlist": ["inputEx.TimeIntervalField"], "name": "inputex-timeinterval.js", "module": "inputex-time"}, "inputex-stringavailability.js": {"classlist": ["inputEx.StringAvailability"], "name": "inputex-stringavailability.js", "module": "inputex-string"}, "inputex-checkbox.js": {"classlist": ["inputEx.CheckBox"], "name": "inputex-checkbox.js", "module": "inputex-button"}, "inputex-button.js": {"classlist": ["inputEx.widget.Button"], "name": "inputex-button.js", "module": "inputex-base"}, "inputex_en.js": {"classlist": [], "name": "inputex_en.js", "module": "inputex"}, "inputex-multiselect.js": {"classlist": ["inputEx.MultiSelectField"], "name": "inputex-multiselect.js", "module": "inputex-multiautocompletecustom"}, "inputex-choice.js": {"classlist": ["inputEx.mixin.choice"], "name": "inputex-choice.js", "module": "inputex-checkbox"}, "inputex-ratingstarsform.js": {"classlist": ["inputEx.RatingStarsForm"], "name": "inputex-ratingstarsform.js", "module": "inputex-ratingstars"}, "inputex-slider.js": {"classlist": ["inputEx.SliderField"], "name": "inputex-slider.js", "module": "inputex-serialize"}, "inputex-datepicker.js": {"classlist": ["inputEx.DatePickerField"], "name": "inputex-datepicker.js", "module": "inputex-date"}, "inputex-textautotag.js": {"classlist": ["inputEx.TextAutoTag"], "name": "inputex-textautotag.js", "module": "inputex-textarea"}, "inputex-object.js": {"classlist": ["inputEx.ObjectField"], "name": "inputex-object.js", "module": "inputex-number"}, "inputex-keyvalue.js": {"classlist": ["inputEx.KeyValueField"], "name": "inputex-keyvalue.js", "module": "inputex-keyopvalue"}, "inputex-menu.js": {"classlist": ["inputEx.MenuField"], "name": "inputex-menu.js", "module": "inputex-map"}, "inputex-file.js": {"classlist": ["inputEx.FileField"], "name": "inputex-file.js", "module": "inputex-field"}, "inputex-colorpicker.js": {"classlist": ["inputEx.ColorPickerField"], "name": "inputex-colorpicker.js", "module": "inputex-color"}, "inputex-type.js": {"classlist": ["inputEx.TypeField"], "name": "inputex-type.js", "module": "inputex-tree"}, "inputex-field.js": {"classlist": ["inputEx.Field"], "name": "inputex-field.js", "module": "inputex-email"}, "inputex.js": {"classlist": ["inputEx"], "name": "inputex.js", "module": "inputex"}, "inputex-datetime.js": {"classlist": ["inputEx.DateTimeField"], "name": "inputex-datetime.js", "module": "inputex-datesplit"}, "inputex_nl.js": {"classlist": [], "name": "inputex_nl.js", "module": "inputex"}, "inputex-dateselectmonth.js": {"classlist": ["inputEx.DateSelectMonthField"], "name": "inputex-dateselectmonth.js", "module": "inputex-datepicker"}, "inputex-serialize.js": {"classlist": ["inputEx.SerializeField", "inputEx.SerializeField.serializers"], "name": "inputex-serialize.js", "module": "inputex-selecttwice"}, "inputex-select.js": {"classlist": ["inputEx.SelectField"], "name": "inputex-select.js", "module": "inputex-rte"}, "inputex-datatable.js": {"classlist": [], "name": "inputex-datatable.js", "module": "inputex-combine"}, "inputex-jsontreeinspector.js": {"classlist": ["inputEx.widget.JsonTreeInspector"], "name": "inputex-jsontreeinspector.js", "module": "inputex-jsonschema"}, "inputex-rte.js": {"classlist": ["inputEx.RTEField"], "name": "inputex-rte.js", "module": "inputex-rpc"}, "inputex-hidden.js": {"classlist": ["inputEx.HiddenField"], "name": "inputex-hidden.js", "module": "inputex-group"}, "inputex-map.js": {"classlist": ["inputEx.MapField"], "name": "inputex-map.js", "module": "inputex-pie-listcustom"}, "inputex-url.js": {"classlist": ["inputEx.UrlField"], "name": "inputex-url.js", "module": "inputex-uppercase"}, "inputex-vector.js": {"classlist": ["inputEx.VectorField"], "name": "inputex-vector.js", "module": "inputex-url"}, "inputex-tree.js": {"classlist": ["inputEx.TreeField"], "name": "inputex-tree.js", "module": "inputex-tinymce"}, "inputex-number.js": {"classlist": ["inputEx.NumberField"], "name": "inputex-number.js", "module": "inputex-multiselectcustom"}, "inputex-multiselectcustom.js": {"classlist": ["inputEx.MultiSelectCustomField"], "name": "inputex-multiselectcustom.js", "module": "inputex-multiselect"}, "inputex_de.js": {"classlist": [], "name": "inputex_de.js", "module": "inputex"}, "inputex-datesplit.js": {"classlist": ["inputEx.DateSplitField"], "name": "inputex-datesplit.js", "module": "inputex-dateselectmonth"}, "inputex-dtinplaceedit.js": {"classlist": ["inputEx.widget.dtInPlaceEdit", "inputEx.widget.CellEditor"], "name": "inputex-dtinplaceedit.js", "module": "inputex-dsselect"}, "inputex-textarea.js": {"classlist": ["inputEx.Textarea"], "name": "inputex-textarea.js", "module": "inputex-stringavailability"}, "inputex-ipv4.js": {"classlist": ["inputEx.IPv4Field"], "name": "inputex-ipv4.js", "module": "inputex-integer"}, "inputex-combine.js": {"classlist": ["inputEx.CombineField"], "name": "inputex-combine.js", "module": "inputex-colorpickerfield"}, "inputex-password.js": {"classlist": ["inputEx.PasswordField"], "name": "inputex-password.js", "module": "panel"}, "inputex-time.js": {"classlist": ["inputEx.TimeField"], "name": "inputex-time.js", "module": "inputex-textautotag"}, "inputex-lens.js": {"classlist": ["inputEx.Lens"], "name": "inputex-lens.js", "module": "inputex-keyvalue"}, "inputex-form.js": {"classlist": ["inputEx.Form"], "name": "inputex-form.js", "module": "inputex-file"}, "inputex-panel.js": {"classlist": ["inputEx.Panel"], "name": "inputex-panel.js", "module": "inputex-object"}, "inputex-uneditable.js": {"classlist": ["inputEx.UneditableField"], "name": "inputex-uneditable.js", "module": "inputex-type"}, "inputex-inplaceedit.js": {"classlist": ["inputEx.InPlaceEdit"], "name": "inputex-inplaceedit.js", "module": "inputex-hidden"}, "inputex-multiautocomplete.js": {"classlist": ["inputEx.MultiAutoComplete"], "name": "inputex-multiautocomplete.js", "module": "inputex-menu"}, "inputex-listcustom.js": {"classlist": [], "name": "inputex-listcustom.js", "module": "inputex-list"}, "inputex-timerange.js": {"classlist": [], "name": "inputex-timerange.js", "module": "inputex-timeinterval"}, "inputex-jsonschema.js": {"classlist": ["inputEx.JsonSchema", "inputEx.JsonSchema.Builder"], "name": "inputex-jsonschema.js", "module": "inputex-ipv4"}, "inputex-smdtester.js": {"classlist": ["inputEx.RPC.SMDTester"], "name": "inputex-smdtester.js", "module": "inputex-slider"}, "loader.js": {"classlist": [], "name": "loader.js", "module": "inputex"}, "inputex-visus.js": {"classlist": ["inputEx.visus"], "name": "inputex-visus.js", "module": "inputex-vector"}, "inputex-list.js": {"classlist": ["inputEx.ListField"], "name": "inputex-list.js", "module": "inputex-lens"}, "inputex-color.js": {"classlist": ["inputEx.ColorField"], "name": "inputex-color.js", "module": "inputex-choice"}, "inputex-uppercase.js": {"classlist": ["inputEx.UpperCaseField"], "name": "inputex-uppercase.js", "module": "inputex-uneditable"}, "inputex_it.js": {"classlist": [], "name": "inputex_it.js", "module": "inputex"}, "inputex-ratingstars.js": {"classlist": ["inputEx.RatingStars"], "name": "inputex-ratingstars.js", "module": "inputex-radio"}, "inputex_ca.js": {"classlist": [], "name": "inputex_ca.js", "module": "inputex"}, "inputex-tinymce.js": {"classlist": ["inputEx.TinyMCEField"], "name": "inputex-tinymce.js", "module": "inputex-timerange"}, "inputex-multiautocompletecustom.js": {"classlist": ["inputEx.MultiAutoCompleteCustom"], "name": "inputex-multiautocompletecustom.js", "module": "inputex-multiautocomplete"}, "inputex-autocomplete.js": {"classlist": ["inputEx.AutoComplete"], "name": "inputex-autocomplete.js", "module": "inputex"}, "inputex-dsselect.js": {"classlist": ["inputEx.DSSelectField"], "name": "inputex-dsselect.js", "module": "inputex-datetime"}, "inputex-email.js": {"classlist": ["inputEx.EmailField"], "name": "inputex-email.js", "module": "inputex-dtinplaceedit"}, "inputex-radio.js": {"classlist": ["inputEx.RadioField"], "name": "inputex-radio.js", "module": "inputex-password"}, "inputex-base.js": {"classlist": ["inputExBase"], "name": "inputex-base.js", "module": "inputex-autocomplete"}, "inputex-date.js": {"classlist": ["inputEx.DateField"], "name": "inputex-date.js", "module": "inputex-datatable"}, "inputex-selecttwice.js": {"classlist": ["inputEx.SelectTwiceField"], "name": "inputex-selecttwice.js", "module": "inputex-select"}, "inputex-integer.js": {"classlist": ["inputEx.IntegerField"], "name": "inputex-integer.js", "module": "inputex-inplaceedit"}}}